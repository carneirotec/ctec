/**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the w64 mingw-runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */
#SenãoDefinido _WINGDI_
#Defina _WINGDI_

#Defina WINGDIAPI DECLSPEC_IMPORT
#Defina WINSPOOLAPI DECLSPEC_IMPORT

#SeDefinido __cplusplus
Externo "C" {
#FimSe

#SenãoDefinido WINVER
#Defina WINVER 0x0502
#FimSe

#SenãoDefinido NOGDI
#SenãoDefinido NORASTEROPS
#Defina R2_BLACK 1
#Defina R2_NOTMERGEPEN 2
#Defina R2_MASKNOTPEN 3
#Defina R2_NOTCOPYPEN 4
#Defina R2_MASKPENNOT 5
#Defina R2_NOT 6
#Defina R2_XORPEN 7
#Defina R2_NOTMASKPEN 8
#Defina R2_MASKPEN 9
#Defina R2_NOTXORPEN 10
#Defina R2_NOP 11
#Defina R2_MERGENOTPEN 12
#Defina R2_COPYPEN 13
#Defina R2_MERGEPENNOT 14
#Defina R2_MERGEPEN 15
#Defina R2_WHITE 16
#Defina R2_LAST 16

#Defina SRCCOPY (DWORD)0x00CC0020
#Defina SRCPAINT (DWORD)0x00EE0086
#Defina SRCAND (DWORD)0x008800C6
#Defina SRCINVERT (DWORD)0x00660046
#Defina SRCERASE (DWORD)0x00440328
#Defina NOTSRCCOPY (DWORD)0x00330008
#Defina NOTSRCERASE (DWORD)0x001100A6
#Defina MERGECOPY (DWORD)0x00C000CA
#Defina MERGEPAINT (DWORD)0x00BB0226
#Defina PATCOPY (DWORD)0x00F00021
#Defina PATPAINT (DWORD)0x00FB0A09
#Defina PATINVERT (DWORD)0x005A0049
#Defina DSTINVERT (DWORD)0x00550009
#Defina BLACKNESS (DWORD)0x00000042
#Defina WHITENESS (DWORD)0x00FF0062
#Defina NOMIRRORBITMAP (DWORD)0x80000000
#Defina CAPTUREBLT (DWORD)0x40000000
#Defina MAKEROP4(fore,back) (DWORD)((((back) << 8) & 0xFF000000) | (fore))
#FimSe

#Defina GDI_ERROR (0xFFFFFFFFL)
#Defina HGDI_ERROR (LongToHandle(0xFFFFFFFFL))

#Defina ERROR 0
#Defina NULLREGION 1
#Defina SIMPLEREGION 2
#Defina COMPLEXREGION 3
#Defina RGN_ERROR ERROR

#Defina RGN_AND 1
#Defina RGN_OR 2
#Defina RGN_XOR 3
#Defina RGN_DIFF 4
#Defina RGN_COPY 5
#Defina RGN_MIN RGN_AND
#Defina RGN_MAX RGN_COPY

#Defina BLACKONWHITE 1
#Defina WHITEONBLACK 2
#Defina COLORONCOLOR 3
#Defina HALFTONE 4
#Defina MAXSTRETCHBLTMODE 4

#Defina STRETCH_ANDSCANS BLACKONWHITE
#Defina STRETCH_ORSCANS WHITEONBLACK
#Defina STRETCH_DELETESCANS COLORONCOLOR
#Defina STRETCH_HALFTONE HALFTONE

#Defina ALTERNATE 1
#Defina WINDING 2
#Defina POLYFILL_LAST 2

#Defina LAYOUT_RTL 0x00000001
#Defina LAYOUT_BTT 0x00000002
#Defina LAYOUT_VBH 0x00000004
#Defina LAYOUT_ORIENTATIONMASK (LAYOUT_RTL | LAYOUT_BTT | LAYOUT_VBH)
#Defina LAYOUT_BITMAPORIENTATIONPRESERVED 0x00000008

#Defina TA_NOUPDATECP 0
#Defina TA_UPDATECP 1

#Defina TA_LEFT 0
#Defina TA_RIGHT 2
#Defina TA_CENTER 6

#Defina TA_TOP 0
#Defina TA_BOTTOM 8
#Defina TA_BASELINE 24
#Defina TA_RTLREADING 256
#Defina TA_MASK (TA_BASELINE+TA_CENTER+TA_UPDATECP+TA_RTLREADING)

#Defina VTA_BASELINE TA_BASELINE
#Defina VTA_LEFT TA_BOTTOM
#Defina VTA_RIGHT TA_TOP
#Defina VTA_CENTER TA_CENTER
#Defina VTA_BOTTOM TA_RIGHT
#Defina VTA_TOP TA_LEFT

#Defina ETO_OPAQUE 0x0002
#Defina ETO_CLIPPED 0x0004
#Defina ETO_GLYPH_INDEX 0x0010
#Defina ETO_RTLREADING 0x0080
#Defina ETO_NUMERICSLOCAL 0x0400
#Defina ETO_NUMERICSLATIN 0x0800
#Defina ETO_IGNORELANGUAGE 0x1000
#Defina ETO_PDY 0x2000

#Defina ASPECT_FILTERING 0x0001

#Defina DCB_RESET 0x0001
#Defina DCB_ACCUMULATE 0x0002
#Defina DCB_DIRTY DCB_ACCUMULATE
#Defina DCB_SET (DCB_RESET | DCB_ACCUMULATE)
#Defina DCB_ENABLE 0x0004
#Defina DCB_DISABLE 0x0008

#SenãoDefinido NOMETAFILE

#Defina META_SETBKCOLOR 0x0201
#Defina META_SETBKMODE 0x0102
#Defina META_SETMAPMODE 0x0103
#Defina META_SETROP2 0x0104
#Defina META_SETRELABS 0x0105
#Defina META_SETPOLYFILLMODE 0x0106
#Defina META_SETSTRETCHBLTMODE 0x0107
#Defina META_SETTEXTCHAREXTRA 0x0108
#Defina META_SETTEXTCOLOR 0x0209
#Defina META_SETTEXTJUSTIFICATION 0x020A
#Defina META_SETWINDOWORG 0x020B
#Defina META_SETWINDOWEXT 0x020C
#Defina META_SETVIEWPORTORG 0x020D
#Defina META_SETVIEWPORTEXT 0x020E
#Defina META_OFFSETWINDOWORG 0x020F
#Defina META_SCALEWINDOWEXT 0x0410
#Defina META_OFFSETVIEWPORTORG 0x0211
#Defina META_SCALEVIEWPORTEXT 0x0412
#Defina META_LINETO 0x0213
#Defina META_MOVETO 0x0214
#Defina META_EXCLUDECLIPRECT 0x0415
#Defina META_INTERSECTCLIPRECT 0x0416
#Defina META_ARC 0x0817
#Defina META_ELLIPSE 0x0418
#Defina META_FLOODFILL 0x0419
#Defina META_PIE 0x081A
#Defina META_RECTANGLE 0x041B
#Defina META_ROUNDRECT 0x061C
#Defina META_PATBLT 0x061D
#Defina META_SAVEDC 0x001E
#Defina META_SETPIXEL 0x041F
#Defina META_OFFSETCLIPRGN 0x0220
#Defina META_TEXTOUT 0x0521
#Defina META_BITBLT 0x0922
#Defina META_STRETCHBLT 0x0B23
#Defina META_POLYGON 0x0324
#Defina META_POLYLINE 0x0325
#Defina META_ESCAPE 0x0626
#Defina META_RESTOREDC 0x0127
#Defina META_FILLREGION 0x0228
#Defina META_FRAMEREGION 0x0429
#Defina META_INVERTREGION 0x012A
#Defina META_PAINTREGION 0x012B
#Defina META_SELECTCLIPREGION 0x012C
#Defina META_SELECTOBJECT 0x012D
#Defina META_SETTEXTALIGN 0x012E
#Defina META_CHORD 0x0830
#Defina META_SETMAPPERFLAGS 0x0231
#Defina META_EXTTEXTOUT 0x0a32
#Defina META_SETDIBTODEV 0x0d33
#Defina META_SELECTPALETTE 0x0234
#Defina META_REALIZEPALETTE 0x0035
#Defina META_ANIMATEPALETTE 0x0436
#Defina META_SETPALENTRIES 0x0037
#Defina META_POLYPOLYGON 0x0538
#Defina META_RESIZEPALETTE 0x0139
#Defina META_DIBBITBLT 0x0940
#Defina META_DIBSTRETCHBLT 0x0b41
#Defina META_DIBCREATEPATTERNBRUSH 0x0142
#Defina META_STRETCHDIB 0x0f43
#Defina META_EXTFLOODFILL 0x0548
#Defina META_SETLAYOUT 0x0149
#Defina META_DELETEOBJECT 0x01f0
#Defina META_CREATEPALETTE 0x00f7
#Defina META_CREATEPATTERNBRUSH 0x01F9
#Defina META_CREATEPENINDIRECT 0x02FA
#Defina META_CREATEFONTINDIRECT 0x02FB
#Defina META_CREATEBRUSHINDIRECT 0x02FC
#Defina META_CREATEREGION 0x06FF

  Tipo Estrutura _DRAWPATRECT {
    POINT ptPosition;
    POINT ptSize;
    WORD wStyle;
    WORD wPattern;
  } DRAWPATRECT,*PDRAWPATRECT;
#FimSe

#Defina NEWFRAME 1
#Defina ABORTDOC 2
#Defina NEXTBAND 3
#Defina SETCOLORTABLE 4
#Defina GETCOLORTABLE 5
#Defina FLUSHOUTPUT 6
#Defina DRAFTMODE 7
#Defina QUERYESCSUPPORT 8
#Defina SETABORTPROC 9
#Defina STARTDOC 10
#Defina ENDDOC 11
#Defina GETPHYSPAGESIZE 12
#Defina GETPRINTINGOFFSET 13
#Defina GETSCALINGFACTOR 14
#Defina MFCOMMENT 15
#Defina GETPENWIDTH 16
#Defina SETCOPYCOUNT 17
#Defina SELECTPAPERSOURCE 18
#Defina DEVICEDATA 19
#Defina PASSTHROUGH 19
#Defina GETTECHNOLGY 20
#Defina GETTECHNOLOGY 20
#Defina SETLINECAP 21
#Defina SETLINEJOIN 22
#Defina SETMITERLIMIT 23
#Defina BANDINFO 24
#Defina DRAWPATTERNRECT 25
#Defina GETVECTORPENSIZE 26
#Defina GETVECTORBRUSHSIZE 27
#Defina ENABLEDUPLEX 28
#Defina GETSETPAPERBINS 29
#Defina GETSETPRINTORIENT 30
#Defina ENUMPAPERBINS 31
#Defina SETDIBSCALING 32
#Defina EPSPRINTING 33
#Defina ENUMPAPERMETRICS 34
#Defina GETSETPAPERMETRICS 35
#Defina POSTSCRIPT_DATA 37
#Defina POSTSCRIPT_IGNORE 38
#Defina MOUSETRAILS 39
#Defina GETDEVICEUNITS 42

#Defina GETEXTENDEDTEXTMETRICS 256
#Defina GETEXTENTTABLE 257
#Defina GETPAIRKERNTABLE 258
#Defina GETTRACKKERNTABLE 259
#Defina EXTTEXTOUT 512
#Defina GETFACENAME 513
#Defina DOWNLOADFACE 514
#Defina ENABLERELATIVEWIDTHS 768
#Defina ENABLEPAIRKERNING 769
#Defina SETKERNTRACK 770
#Defina SETALLJUSTVALUES 771
#Defina SETCHARSET 772

#Defina STRETCHBLT 2048
#Defina METAFILE_DRIVER 2049
#Defina GETSETSCREENPARAMS 3072
#Defina QUERYDIBSUPPORT 3073
#Defina BEGIN_PATH 4096
#Defina CLIP_TO_PATH 4097
#Defina END_PATH 4098
#Defina EXT_DEVICE_CAPS 4099
#Defina RESTORE_CTM 4100
#Defina SAVE_CTM 4101
#Defina SET_ARC_DIRECTION 4102
#Defina SET_BACKGROUND_COLOR 4103
#Defina SET_POLY_MODE 4104
#Defina SET_SCREEN_ANGLE 4105
#Defina SET_SPREAD 4106
#Defina TRANSFORM_CTM 4107
#Defina SET_CLIP_BOX 4108
#Defina SET_BOUNDS 4109
#Defina SET_MIRROR_MODE 4110
#Defina OPENCHANNEL 4110
#Defina DOWNLOADHEADER 4111
#Defina CLOSECHANNEL 4112
#Defina POSTSCRIPT_PASSTHROUGH 4115
#Defina ENCAPSULATED_POSTSCRIPT 4116

#Defina POSTSCRIPT_IDENTIFY 4117
#Defina POSTSCRIPT_INJECTION 4118

#Defina CHECKJPEGFORMAT 4119
#Defina CHECKPNGFORMAT 4120

#Defina GET_PS_FEATURESETTING 4121

#Defina SPCLPASSTHROUGH2 4568

#Defina PSIDENT_GDICENTRIC 0
#Defina PSIDENT_PSCENTRIC 1

  Tipo Estrutura _PSINJECTDATA {
    DWORD DataBytes;
    WORD InjectionPoint;
    WORD PageNumber;
  } PSINJECTDATA,*PPSINJECTDATA;

#Defina PSINJECT_BEGINSTREAM 1
#Defina PSINJECT_PSADOBE 2
#Defina PSINJECT_PAGESATEND 3
#Defina PSINJECT_PAGES 4

#Defina PSINJECT_DOCNEEDEDRES 5
#Defina PSINJECT_DOCSUPPLIEDRES 6
#Defina PSINJECT_PAGEORDER 7
#Defina PSINJECT_ORIENTATION 8
#Defina PSINJECT_BOUNDINGBOX 9
#Defina PSINJECT_DOCUMENTPROCESSCOLORS 10

#Defina PSINJECT_COMMENTS 11
#Defina PSINJECT_BEGINDEFAULTS 12
#Defina PSINJECT_ENDDEFAULTS 13
#Defina PSINJECT_BEGINPROLOG 14
#Defina PSINJECT_ENDPROLOG 15
#Defina PSINJECT_BEGINSETUP 16
#Defina PSINJECT_ENDSETUP 17
#Defina PSINJECT_TRAILER 18
#Defina PSINJECT_EOF 19
#Defina PSINJECT_ENDSTREAM 20
#Defina PSINJECT_DOCUMENTPROCESSCOLORSATEND 21

#Defina PSINJECT_PAGENUMBER 100
#Defina PSINJECT_BEGINPAGESETUP 101
#Defina PSINJECT_ENDPAGESETUP 102
#Defina PSINJECT_PAGETRAILER 103
#Defina PSINJECT_PLATECOLOR 104

#Defina PSINJECT_SHOWPAGE 105
#Defina PSINJECT_PAGEBBOX 106
#Defina PSINJECT_ENDPAGECOMMENTS 107

#Defina PSINJECT_VMSAVE 200
#Defina PSINJECT_VMRESTORE 201

#Defina FEATURESETTING_NUP 0
#Defina FEATURESETTING_OUTPUT 1
#Defina FEATURESETTING_PSLEVEL 2
#Defina FEATURESETTING_CUSTPAPER 3
#Defina FEATURESETTING_MIRROR 4
#Defina FEATURESETTING_NEGATIVE 5
#Defina FEATURESETTING_PROTOCOL 6

#Defina FEATURESETTING_PRIVATE_BEGIN 0x1000
#Defina FEATURESETTING_PRIVATE_END 0x1FFF

  Tipo Estrutura _PSFEATURE_OUTPUT {
    WINBOOL bPageIndependent;
    WINBOOL bSetPageDevice;
  } PSFEATURE_OUTPUT,*PPSFEATURE_OUTPUT;

  Tipo Estrutura _PSFEATURE_CUSTPAPER {
    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;
  } PSFEATURE_CUSTPAPER,*PPSFEATURE_CUSTPAPER;

#Defina PSPROTOCOL_ASCII 0
#Defina PSPROTOCOL_BCP 1
#Defina PSPROTOCOL_TBCP 2
#Defina PSPROTOCOL_BINARY 3

#Defina QDI_SETDIBITS 1
#Defina QDI_GETDIBITS 2
#Defina QDI_DIBTOSCREEN 4
#Defina QDI_STRETCHDIB 8

#Defina SP_NOTREPORTED 0x4000
#Defina SP_ERROR (-1)
#Defina SP_APPABORT (-2)
#Defina SP_USERABORT (-3)
#Defina SP_OUTOFDISK (-4)
#Defina SP_OUTOFMEMORY (-5)

#Defina PR_JOBSTATUS 0x0000

#Defina OBJ_PEN 1
#Defina OBJ_BRUSH 2
#Defina OBJ_DC 3
#Defina OBJ_METADC 4
#Defina OBJ_PAL 5
#Defina OBJ_FONT 6
#Defina OBJ_BITMAP 7
#Defina OBJ_REGION 8
#Defina OBJ_METAFILE 9
#Defina OBJ_MEMDC 10
#Defina OBJ_EXTPEN 11
#Defina OBJ_ENHMETADC 12
#Defina OBJ_ENHMETAFILE 13
#Defina OBJ_COLORSPACE 14

#Defina MWT_IDENTITY 1
#Defina MWT_LEFTMULTIPLY 2
#Defina MWT_RIGHTMULTIPLY 3

#Defina MWT_MIN MWT_IDENTITY
#Defina MWT_MAX MWT_RIGHTMULTIPLY

#Defina _XFORM_
  Tipo Estrutura tagXFORM {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
  } XFORM,*PXFORM,*LPXFORM;

  Tipo Estrutura tagBITMAP {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
  } BITMAP,*PBITMAP,*NPBITMAP,*LPBITMAP;

#Inclua <pshpack1.h>
  Tipo Estrutura tagRGBTRIPLE {
    BYTE rgbtBlue;
    BYTE rgbtGreen;
    BYTE rgbtRed;
  } RGBTRIPLE;
#Inclua <poppack.h>

  Tipo Estrutura tagRGBQUAD {
    BYTE rgbBlue;
    BYTE rgbGreen;
    BYTE rgbRed;
    BYTE rgbReserved;
  } RGBQUAD;
  Tipo RGBQUAD *LPRGBQUAD;

#Defina CS_ENABLE 0x00000001L
#Defina CS_DISABLE 0x00000002L
#Defina CS_DELETE_TRANSFORM 0x00000003L

//!__TINYC__: #Defina LCS_SIGNATURE 'PSOC'
//!__TINYC__: #Defina LCS_sRGB 'sRGB'
//!__TINYC__: #Defina LCS_WINDOWS_COLOR_SPACE 'Win '

  Tipo LONG LCSCSTYPE;
#Defina LCS_CALIBRATED_RGB 0x00000000L

  Tipo LONG LCSGAMUTMATCH;
#Defina LCS_GM_BUSINESS 0x00000001L
#Defina LCS_GM_GRAPHICS 0x00000002L
#Defina LCS_GM_IMAGES 0x00000004L
#Defina LCS_GM_ABS_COLORIMETRIC 0x00000008L

#Defina CM_OUT_OF_GAMUT 255
#Defina CM_IN_GAMUT 0

#Defina ICM_ADDPROFILE 1
#Defina ICM_DELETEPROFILE 2
#Defina ICM_QUERYPROFILE 3
#Defina ICM_SETDEFAULTPROFILE 4
#Defina ICM_REGISTERICMATCHER 5
#Defina ICM_UNREGISTERICMATCHER 6
#Defina ICM_QUERYMATCH 7

#Defina GetKValue(cmyk) ((BYTE)(cmyk))
#Defina GetYValue(cmyk) ((BYTE)((cmyk)>> 8))
#Defina GetMValue(cmyk) ((BYTE)((cmyk)>>16))
#Defina GetCValue(cmyk) ((BYTE)((cmyk)>>24))

#Defina CMYK(c,m,y,k) ((COLORREF)((((BYTE)(k)|((WORD)((BYTE)(y))<<8))|(((DWORD)(BYTE)(m))<<16))|(((DWORD)(BYTE)(c))<<24)))

  Tipo Longo FXPT16DOT16,*LPFXPT16DOT16;
  Tipo Longo FXPT2DOT30,*LPFXPT2DOT30;

  Tipo Estrutura tagCIEXYZ {
    FXPT2DOT30 ciexyzX;
    FXPT2DOT30 ciexyzY;
    FXPT2DOT30 ciexyzZ;
  } CIEXYZ;
  Tipo CIEXYZ *LPCIEXYZ;

  Tipo Estrutura tagICEXYZTRIPLE {
    CIEXYZ ciexyzRed;
    CIEXYZ ciexyzGreen;
    CIEXYZ ciexyzBlue;
  } CIEXYZTRIPLE;

  Tipo CIEXYZTRIPLE *LPCIEXYZTRIPLE;

  Tipo Estrutura tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[MAX_PATH];
  } LOGCOLORSPACEA,*LPLOGCOLORSPACEA;

  Tipo Estrutura tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[MAX_PATH];
  } LOGCOLORSPACEW,*LPLOGCOLORSPACEW;

#SeDefinido UNICODE
  Tipo LOGCOLORSPACEW LOGCOLORSPACE;
  Tipo LPLOGCOLORSPACEW LPLOGCOLORSPACE;
#Senão
  Tipo LOGCOLORSPACEA LOGCOLORSPACE;
  Tipo LPLOGCOLORSPACEA LPLOGCOLORSPACE;
#FimSe

  Tipo Estrutura tagBITMAPCOREHEADER {
    DWORD bcSize;
    WORD bcWidth;
    WORD bcHeight;
    WORD bcPlanes;
    WORD bcBitCount;
  } BITMAPCOREHEADER,*LPBITMAPCOREHEADER,*PBITMAPCOREHEADER;

  Tipo Estrutura tagBITMAPINFOHEADER {
    DWORD biSize;
    LONG biWidth;
    LONG biHeight;
    WORD biPlanes;
    WORD biBitCount;
    DWORD biCompression;
    DWORD biSizeImage;
    LONG biXPelsPerMeter;
    LONG biYPelsPerMeter;
    DWORD biClrUsed;
    DWORD biClrImportant;
  } BITMAPINFOHEADER,*LPBITMAPINFOHEADER,*PBITMAPINFOHEADER;

  Tipo Estrutura {
    DWORD bV4Size;
    LONG bV4Width;
    LONG bV4Height;
    WORD bV4Planes;
    WORD bV4BitCount;
    DWORD bV4V4Compression;
    DWORD bV4SizeImage;
    LONG bV4XPelsPerMeter;
    LONG bV4YPelsPerMeter;
    DWORD bV4ClrUsed;
    DWORD bV4ClrImportant;
    DWORD bV4RedMask;
    DWORD bV4GreenMask;
    DWORD bV4BlueMask;
    DWORD bV4AlphaMask;
    DWORD bV4CSType;
    CIEXYZTRIPLE bV4Endpoints;
    DWORD bV4GammaRed;
    DWORD bV4GammaGreen;
    DWORD bV4GammaBlue;
  } BITMAPV4HEADER,*LPBITMAPV4HEADER,*PBITMAPV4HEADER;

  Tipo Estrutura {
    DWORD bV5Size;
    LONG bV5Width;
    LONG bV5Height;
    WORD bV5Planes;
    WORD bV5BitCount;
    DWORD bV5Compression;
    DWORD bV5SizeImage;
    LONG bV5XPelsPerMeter;
    LONG bV5YPelsPerMeter;
    DWORD bV5ClrUsed;
    DWORD bV5ClrImportant;
    DWORD bV5RedMask;
    DWORD bV5GreenMask;
    DWORD bV5BlueMask;
    DWORD bV5AlphaMask;
    DWORD bV5CSType;
    CIEXYZTRIPLE bV5Endpoints;
    DWORD bV5GammaRed;
    DWORD bV5GammaGreen;
    DWORD bV5GammaBlue;
    DWORD bV5Intent;
    DWORD bV5ProfileData;
    DWORD bV5ProfileSize;
    DWORD bV5Reserved;
  } BITMAPV5HEADER,*LPBITMAPV5HEADER,*PBITMAPV5HEADER;

//!__TINYC__: #Defina PROFILE_LINKED 'LINK'
//!__TINYC__: #Defina PROFILE_EMBEDDED 'MBED'

#Defina BI_RGB 0L
#Defina BI_RLE8 1L
#Defina BI_RLE4 2L
#Defina BI_BITFIELDS 3L
#Defina BI_JPEG 4L
#Defina BI_PNG 5L

  Tipo Estrutura tagBITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
  } BITMAPINFO,*LPBITMAPINFO,*PBITMAPINFO;

  Tipo Estrutura tagBITMAPCOREINFO {
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
  } BITMAPCOREINFO,*LPBITMAPCOREINFO,*PBITMAPCOREINFO;

#Inclua <pshpack2.h>
  Tipo Estrutura tagBITMAPFILEHEADER {
    WORD bfType;
    DWORD bfSize;
    WORD bfReserved1;
    WORD bfReserved2;
    DWORD bfOffBits;
  } BITMAPFILEHEADER,*LPBITMAPFILEHEADER,*PBITMAPFILEHEADER;
#Inclua <poppack.h>

#Defina MAKEPOINTS(l) (*((POINTS *)&(l)))

#SenãoDefinido NOFONTSIG
  Tipo Estrutura tagFONTSIGNATURE {
    DWORD fsUsb[4];
    DWORD fsCsb[2];
  } FONTSIGNATURE,*PFONTSIGNATURE,*LPFONTSIGNATURE;

  Tipo Estrutura tagCHARSETINFO {
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
  } CHARSETINFO,*PCHARSETINFO,*NPCHARSETINFO,*LPCHARSETINFO;

#Defina TCI_SRCCHARSET 1
#Defina TCI_SRCCODEPAGE 2
#Defina TCI_SRCFONTSIG 3
#Defina TCI_SRCLOCALE 0x1000

  Tipo Estrutura tagLOCALESIGNATURE {
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
  } LOCALESIGNATURE,*PLOCALESIGNATURE,*LPLOCALESIGNATURE;
#FimSe


#SenãoDefinido NOMETAFILE
  Tipo Estrutura tagHANDLETABLE {
    HGDIOBJ objectHandle[1];
  } HANDLETABLE,*PHANDLETABLE,*LPHANDLETABLE;

  Tipo Estrutura tagMETARECORD {
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
  } METARECORD;
  Tipo Estrutura tagMETARECORD UNALIGNED *PMETARECORD;
  Tipo Estrutura tagMETARECORD UNALIGNED *LPMETARECORD;

  Tipo Estrutura tagMETAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
  } METAFILEPICT,*LPMETAFILEPICT;

#Inclua <pshpack2.h>
  Tipo Estrutura tagMETAHEADER {
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
  } METAHEADER;
  Tipo Estrutura tagMETAHEADER UNALIGNED *PMETAHEADER;
  Tipo Estrutura tagMETAHEADER UNALIGNED *LPMETAHEADER;

#Inclua <poppack.h>

  Tipo Estrutura tagENHMETARECORD {
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
  } ENHMETARECORD,*PENHMETARECORD,*LPENHMETARECORD;

  Tipo Estrutura tagENHMETAHEADER {
    DWORD iType;
    DWORD nSize;
    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;
    WORD sReserved;
    DWORD nDescription;
    DWORD offDescription;
    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;
    DWORD cbPixelFormat;
    DWORD offPixelFormat;
    DWORD bOpenGL;
    SIZEL szlMicrometers;
  } ENHMETAHEADER,*PENHMETAHEADER,*LPENHMETAHEADER;
#FimSe

#SenãoDefinido NOTEXTMETRIC
#Defina TMPF_FIXED_PITCH 0x01
#Defina TMPF_VECTOR 0x02
#Defina TMPF_DEVICE 0x08
#Defina TMPF_TRUETYPE 0x04

#SeDefinido UNICODE
  Tipo WCHAR BCHAR;
#Senão
  Tipo BYTE BCHAR;
#FimSe

#SenãoDefinido _TEXTMETRIC_DEFINED
#Defina _TEXTMETRIC_DEFINED
  Tipo Estrutura tagTEXTMETRICA {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
  } TEXTMETRICA,*PTEXTMETRICA,*NPTEXTMETRICA,*LPTEXTMETRICA;

  Tipo Estrutura tagTEXTMETRICW {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
  } TEXTMETRICW,*PTEXTMETRICW,*NPTEXTMETRICW,*LPTEXTMETRICW;
#SeDefinido UNICODE
  Tipo TEXTMETRICW TEXTMETRIC;
  Tipo PTEXTMETRICW PTEXTMETRIC;
  Tipo NPTEXTMETRICW NPTEXTMETRIC;
  Tipo LPTEXTMETRICW LPTEXTMETRIC;
#Senão
  Tipo TEXTMETRICA TEXTMETRIC;
  Tipo PTEXTMETRICA PTEXTMETRIC;
  Tipo NPTEXTMETRICA NPTEXTMETRIC;
  Tipo LPTEXTMETRICA LPTEXTMETRIC;
#FimSe
#FimSe

#Defina NTM_REGULAR 0x00000040L
#Defina NTM_BOLD 0x00000020L
#Defina NTM_ITALIC 0x00000001L

#Defina NTM_NONNEGATIVE_AC 0x00010000
#Defina NTM_PS_OPENTYPE 0x00020000
#Defina NTM_TT_OPENTYPE 0x00040000
#Defina NTM_MULTIPLEMASTER 0x00080000
#Defina NTM_TYPE1 0x00100000
#Defina NTM_DSIG 0x00200000

#Inclua <pshpack4.h>
  Tipo Estrutura tagNEWTEXTMETRICA {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
  } NEWTEXTMETRICA,*PNEWTEXTMETRICA,*NPNEWTEXTMETRICA,*LPNEWTEXTMETRICA;

  Tipo Estrutura tagNEWTEXTMETRICW {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
  } NEWTEXTMETRICW,*PNEWTEXTMETRICW,*NPNEWTEXTMETRICW,*LPNEWTEXTMETRICW;
#SeDefinido UNICODE
  Tipo NEWTEXTMETRICW NEWTEXTMETRIC;
  Tipo PNEWTEXTMETRICW PNEWTEXTMETRIC;
  Tipo NPNEWTEXTMETRICW NPNEWTEXTMETRIC;
  Tipo LPNEWTEXTMETRICW LPNEWTEXTMETRIC;
#Senão
  Tipo NEWTEXTMETRICA NEWTEXTMETRIC;
  Tipo PNEWTEXTMETRICA PNEWTEXTMETRIC;
  Tipo NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
  Tipo LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
#FimSe
#Inclua <poppack.h>

  Tipo Estrutura tagNEWTEXTMETRICEXA {
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
  } NEWTEXTMETRICEXA;

  Tipo Estrutura tagNEWTEXTMETRICEXW {
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
  } NEWTEXTMETRICEXW;
#SeDefinido UNICODE
  Tipo NEWTEXTMETRICEXW NEWTEXTMETRICEX;
#Senão
  Tipo NEWTEXTMETRICEXA NEWTEXTMETRICEX;
#FimSe
#FimSe

  Tipo Estrutura tagPELARRAY {
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
  } PELARRAY,*PPELARRAY,*NPPELARRAY,*LPPELARRAY;

  Tipo Estrutura tagLOGBRUSH {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
  } LOGBRUSH,*PLOGBRUSH,*NPLOGBRUSH,*LPLOGBRUSH;

  Tipo Estrutura tagLOGBRUSH32 {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
  } LOGBRUSH32,*PLOGBRUSH32,*NPLOGBRUSH32,*LPLOGBRUSH32;

  Tipo LOGBRUSH PATTERN;
  Tipo PATTERN *PPATTERN;
  Tipo PATTERN *NPPATTERN;
  Tipo PATTERN *LPPATTERN;

  Tipo Estrutura tagLOGPEN {
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
  } LOGPEN,*PLOGPEN,*NPLOGPEN,*LPLOGPEN;

  Tipo Estrutura tagEXTLOGPEN {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
  } EXTLOGPEN,*PEXTLOGPEN,*NPEXTLOGPEN,*LPEXTLOGPEN;

#SenãoDefinido _PALETTEENTRY_DEFINED
#Defina _PALETTEENTRY_DEFINED
  Tipo Estrutura tagPALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
  } PALETTEENTRY,*PPALETTEENTRY,*LPPALETTEENTRY;
#FimSe

#SenãoDefinido _LOGPALETTE_DEFINED
#Defina _LOGPALETTE_DEFINED

  Tipo Estrutura tagLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[1];
  } LOGPALETTE,*PLOGPALETTE,*NPLOGPALETTE,*LPLOGPALETTE;
#FimSe

#Defina LF_FACESIZE 32

  Tipo Estrutura tagLOGFONTA {
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[LF_FACESIZE];
  } LOGFONTA,*PLOGFONTA,*NPLOGFONTA,*LPLOGFONTA;

  Tipo Estrutura tagLOGFONTW {
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[LF_FACESIZE];
  } LOGFONTW,*PLOGFONTW,*NPLOGFONTW,*LPLOGFONTW;
#SeDefinido UNICODE
  Tipo LOGFONTW LOGFONT;
  Tipo PLOGFONTW PLOGFONT;
  Tipo NPLOGFONTW NPLOGFONT;
  Tipo LPLOGFONTW LPLOGFONT;
#Senão
  Tipo LOGFONTA LOGFONT;
  Tipo PLOGFONTA PLOGFONT;
  Tipo NPLOGFONTA NPLOGFONT;
  Tipo LPLOGFONTA LPLOGFONT;
#FimSe

#Defina LF_FULLFACESIZE 64

  Tipo Estrutura tagENUMLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[LF_FULLFACESIZE];
    BYTE elfStyle[LF_FACESIZE];
  } ENUMLOGFONTA,*LPENUMLOGFONTA;

  Tipo Estrutura tagENUMLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[LF_FULLFACESIZE];
    WCHAR elfStyle[LF_FACESIZE];
  } ENUMLOGFONTW,*LPENUMLOGFONTW;
#SeDefinido UNICODE
  Tipo ENUMLOGFONTW ENUMLOGFONT;
  Tipo LPENUMLOGFONTW LPENUMLOGFONT;
#Senão
  Tipo ENUMLOGFONTA ENUMLOGFONT;
  Tipo LPENUMLOGFONTA LPENUMLOGFONT;
#FimSe

  Tipo Estrutura tagENUMLOGFONTEXA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[LF_FULLFACESIZE];
    BYTE elfStyle[LF_FACESIZE];
    BYTE elfScript[LF_FACESIZE];
  } ENUMLOGFONTEXA,*LPENUMLOGFONTEXA;

  Tipo Estrutura tagENUMLOGFONTEXW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[LF_FULLFACESIZE];
    WCHAR elfStyle[LF_FACESIZE];
    WCHAR elfScript[LF_FACESIZE];
  } ENUMLOGFONTEXW,*LPENUMLOGFONTEXW;
#SeDefinido UNICODE
  Tipo ENUMLOGFONTEXW ENUMLOGFONTEX;
  Tipo LPENUMLOGFONTEXW LPENUMLOGFONTEX;
#Senão
  Tipo ENUMLOGFONTEXA ENUMLOGFONTEX;
  Tipo LPENUMLOGFONTEXA LPENUMLOGFONTEX;
#FimSe

#Defina OUT_DEFAULT_PRECIS 0
#Defina OUT_STRING_PRECIS 1
#Defina OUT_CHARACTER_PRECIS 2
#Defina OUT_STROKE_PRECIS 3
#Defina OUT_TT_PRECIS 4
#Defina OUT_DEVICE_PRECIS 5
#Defina OUT_RASTER_PRECIS 6
#Defina OUT_TT_ONLY_PRECIS 7
#Defina OUT_OUTLINE_PRECIS 8
#Defina OUT_SCREEN_OUTLINE_PRECIS 9
#Defina OUT_PS_ONLY_PRECIS 10

#Defina CLIP_DEFAULT_PRECIS 0
#Defina CLIP_CHARACTER_PRECIS 1
#Defina CLIP_STROKE_PRECIS 2
#Defina CLIP_MASK 0xf
#Defina CLIP_LH_ANGLES (1<<4)
#Defina CLIP_TT_ALWAYS (2<<4)
#Defina CLIP_DFA_DISABLE (4<<4)
#Defina CLIP_EMBEDDED (8<<4)

#Defina DEFAULT_QUALITY 0
#Defina DRAFT_QUALITY 1
#Defina PROOF_QUALITY 2
#Defina NONANTIALIASED_QUALITY 3
#Defina ANTIALIASED_QUALITY 4

#Defina CLEARTYPE_QUALITY 5
#Defina CLEARTYPE_NATURAL_QUALITY 6

#Defina DEFAULT_PITCH 0
#Defina FIXED_PITCH 1
#Defina VARIABLE_PITCH 2
#Defina MONO_FONT 8

#Defina ANSI_CHARSET 0
#Defina DEFAULT_CHARSET 1
#Defina SYMBOL_CHARSET 2
#Defina SHIFTJIS_CHARSET 128
#Defina HANGEUL_CHARSET 129
#Defina HANGUL_CHARSET 129
#Defina GB2312_CHARSET 134
#Defina CHINESEBIG5_CHARSET 136
#Defina OEM_CHARSET 255
#Defina JOHAB_CHARSET 130
#Defina HEBREW_CHARSET 177
#Defina ARABIC_CHARSET 178
#Defina GREEK_CHARSET 161
#Defina TURKISH_CHARSET 162
#Defina VIETNAMESE_CHARSET 163
#Defina THAI_CHARSET 222
#Defina EASTEUROPE_CHARSET 238
#Defina RUSSIAN_CHARSET 204

#Defina MAC_CHARSET 77
#Defina BALTIC_CHARSET 186

#Defina FS_LATIN1 0x00000001L
#Defina FS_LATIN2 0x00000002L
#Defina FS_CYRILLIC 0x00000004L
#Defina FS_GREEK 0x00000008L
#Defina FS_TURKISH 0x00000010L
#Defina FS_HEBREW 0x00000020L
#Defina FS_ARABIC 0x00000040L
#Defina FS_BALTIC 0x00000080L
#Defina FS_VIETNAMESE 0x00000100L
#Defina FS_THAI 0x00010000L
#Defina FS_JISJAPAN 0x00020000L
#Defina FS_CHINESESIMP 0x00040000L
#Defina FS_WANSUNG 0x00080000L
#Defina FS_CHINESETRAD 0x00100000L
#Defina FS_JOHAB 0x00200000L
#Defina FS_SYMBOL 0x80000000L

#Defina FF_DONTCARE (0<<4)
#Defina FF_ROMAN (1<<4)

#Defina FF_SWISS (2<<4)

#Defina FF_MODERN (3<<4)

#Defina FF_SCRIPT (4<<4)
#Defina FF_DECORATIVE (5<<4)

#Defina FW_DONTCARE 0
#Defina FW_THIN 100
#Defina FW_EXTRALIGHT 200
#Defina FW_LIGHT 300
#Defina FW_NORMAL 400
#Defina FW_MEDIUM 500
#Defina FW_SEMIBOLD 600
#Defina FW_BOLD 700
#Defina FW_EXTRABOLD 800
#Defina FW_HEAVY 900

#Defina FW_ULTRALIGHT FW_EXTRALIGHT
#Defina FW_REGULAR FW_NORMAL
#Defina FW_DEMIBOLD FW_SEMIBOLD
#Defina FW_ULTRABOLD FW_EXTRABOLD
#Defina FW_BLACK FW_HEAVY

#Defina PANOSE_COUNT 10
#Defina PAN_FAMILYTYPE_INDEX 0
#Defina PAN_SERIFSTYLE_INDEX 1
#Defina PAN_WEIGHT_INDEX 2
#Defina PAN_PROPORTION_INDEX 3
#Defina PAN_CONTRAST_INDEX 4
#Defina PAN_STROKEVARIATION_INDEX 5
#Defina PAN_ARMSTYLE_INDEX 6
#Defina PAN_LETTERFORM_INDEX 7
#Defina PAN_MIDLINE_INDEX 8
#Defina PAN_XHEIGHT_INDEX 9

#Defina PAN_CULTURE_LATIN 0

  Tipo Estrutura tagPANOSE {
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
  } PANOSE,*LPPANOSE;

#Defina PAN_ANY 0
#Defina PAN_NO_FIT 1

#Defina PAN_FAMILY_TEXT_DISPLAY 2
#Defina PAN_FAMILY_SCRIPT 3
#Defina PAN_FAMILY_DECORATIVE 4
#Defina PAN_FAMILY_PICTORIAL 5

#Defina PAN_SERIF_COVE 2
#Defina PAN_SERIF_OBTUSE_COVE 3
#Defina PAN_SERIF_SQUARE_COVE 4
#Defina PAN_SERIF_OBTUSE_SQUARE_COVE 5
#Defina PAN_SERIF_SQUARE 6
#Defina PAN_SERIF_THIN 7
#Defina PAN_SERIF_BONE 8
#Defina PAN_SERIF_EXAGGERATED 9
#Defina PAN_SERIF_TRIANGLE 10
#Defina PAN_SERIF_NORMAL_SANS 11
#Defina PAN_SERIF_OBTUSE_SANS 12
#Defina PAN_SERIF_PERP_SANS 13
#Defina PAN_SERIF_FLARED 14
#Defina PAN_SERIF_ROUNDED 15

#Defina PAN_WEIGHT_VERY_LIGHT 2
#Defina PAN_WEIGHT_LIGHT 3
#Defina PAN_WEIGHT_THIN 4
#Defina PAN_WEIGHT_BOOK 5
#Defina PAN_WEIGHT_MEDIUM 6
#Defina PAN_WEIGHT_DEMI 7
#Defina PAN_WEIGHT_BOLD 8
#Defina PAN_WEIGHT_HEAVY 9
#Defina PAN_WEIGHT_BLACK 10
#Defina PAN_WEIGHT_NORD 11

#Defina PAN_PROP_OLD_STYLE 2
#Defina PAN_PROP_MODERN 3
#Defina PAN_PROP_EVEN_WIDTH 4
#Defina PAN_PROP_EXPANDED 5
#Defina PAN_PROP_CONDENSED 6
#Defina PAN_PROP_VERY_EXPANDED 7
#Defina PAN_PROP_VERY_CONDENSED 8
#Defina PAN_PROP_MONOSPACED 9

#Defina PAN_CONTRAST_NONE 2
#Defina PAN_CONTRAST_VERY_LOW 3
#Defina PAN_CONTRAST_LOW 4
#Defina PAN_CONTRAST_MEDIUM_LOW 5
#Defina PAN_CONTRAST_MEDIUM 6
#Defina PAN_CONTRAST_MEDIUM_HIGH 7
#Defina PAN_CONTRAST_HIGH 8
#Defina PAN_CONTRAST_VERY_HIGH 9

#Defina PAN_STROKE_GRADUAL_DIAG 2
#Defina PAN_STROKE_GRADUAL_TRAN 3
#Defina PAN_STROKE_GRADUAL_VERT 4
#Defina PAN_STROKE_GRADUAL_HORZ 5
#Defina PAN_STROKE_RAPID_VERT 6
#Defina PAN_STROKE_RAPID_HORZ 7
#Defina PAN_STROKE_INSTANT_VERT 8

#Defina PAN_STRAIGHT_ARMS_HORZ 2
#Defina PAN_STRAIGHT_ARMS_WEDGE 3
#Defina PAN_STRAIGHT_ARMS_VERT 4
#Defina PAN_STRAIGHT_ARMS_SINGLE_SERIF 5
#Defina PAN_STRAIGHT_ARMS_DOUBLE_SERIF 6
#Defina PAN_BENT_ARMS_HORZ 7
#Defina PAN_BENT_ARMS_WEDGE 8
#Defina PAN_BENT_ARMS_VERT 9
#Defina PAN_BENT_ARMS_SINGLE_SERIF 10
#Defina PAN_BENT_ARMS_DOUBLE_SERIF 11

#Defina PAN_LETT_NORMAL_CONTACT 2
#Defina PAN_LETT_NORMAL_WEIGHTED 3
#Defina PAN_LETT_NORMAL_BOXED 4
#Defina PAN_LETT_NORMAL_FLATTENED 5
#Defina PAN_LETT_NORMAL_ROUNDED 6
#Defina PAN_LETT_NORMAL_OFF_CENTER 7
#Defina PAN_LETT_NORMAL_SQUARE 8
#Defina PAN_LETT_OBLIQUE_CONTACT 9
#Defina PAN_LETT_OBLIQUE_WEIGHTED 10
#Defina PAN_LETT_OBLIQUE_BOXED 11
#Defina PAN_LETT_OBLIQUE_FLATTENED 12
#Defina PAN_LETT_OBLIQUE_ROUNDED 13
#Defina PAN_LETT_OBLIQUE_OFF_CENTER 14
#Defina PAN_LETT_OBLIQUE_SQUARE 15

#Defina PAN_MIDLINE_STANDARD_TRIMMED 2
#Defina PAN_MIDLINE_STANDARD_POINTED 3
#Defina PAN_MIDLINE_STANDARD_SERIFED 4
#Defina PAN_MIDLINE_HIGH_TRIMMED 5
#Defina PAN_MIDLINE_HIGH_POINTED 6
#Defina PAN_MIDLINE_HIGH_SERIFED 7
#Defina PAN_MIDLINE_CONSTANT_TRIMMED 8
#Defina PAN_MIDLINE_CONSTANT_POINTED 9
#Defina PAN_MIDLINE_CONSTANT_SERIFED 10
#Defina PAN_MIDLINE_LOW_TRIMMED 11
#Defina PAN_MIDLINE_LOW_POINTED 12
#Defina PAN_MIDLINE_LOW_SERIFED 13

#Defina PAN_XHEIGHT_CONSTANT_SMALL 2
#Defina PAN_XHEIGHT_CONSTANT_STD 3
#Defina PAN_XHEIGHT_CONSTANT_LARGE 4
#Defina PAN_XHEIGHT_DUCKING_SMALL 5
#Defina PAN_XHEIGHT_DUCKING_STD 6
#Defina PAN_XHEIGHT_DUCKING_LARGE 7

#Defina ELF_VENDOR_SIZE 4

  Tipo Estrutura tagEXTLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[LF_FULLFACESIZE];
    BYTE elfStyle[LF_FACESIZE];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[ELF_VENDOR_SIZE];
    DWORD elfCulture;
    PANOSE elfPanose;
  } EXTLOGFONTA,*PEXTLOGFONTA,*NPEXTLOGFONTA,*LPEXTLOGFONTA;

  Tipo Estrutura tagEXTLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[LF_FULLFACESIZE];
    WCHAR elfStyle[LF_FACESIZE];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[ELF_VENDOR_SIZE];
    DWORD elfCulture;
    PANOSE elfPanose;
  } EXTLOGFONTW,*PEXTLOGFONTW,*NPEXTLOGFONTW,*LPEXTLOGFONTW;
#SeDefinido UNICODE
  Tipo EXTLOGFONTW EXTLOGFONT;
  Tipo PEXTLOGFONTW PEXTLOGFONT;
  Tipo NPEXTLOGFONTW NPEXTLOGFONT;
  Tipo LPEXTLOGFONTW LPEXTLOGFONT;
#Senão
  Tipo EXTLOGFONTA EXTLOGFONT;
  Tipo PEXTLOGFONTA PEXTLOGFONT;
  Tipo NPEXTLOGFONTA NPEXTLOGFONT;
  Tipo LPEXTLOGFONTA LPEXTLOGFONT;
#FimSe

#Defina ELF_VERSION 0
#Defina ELF_CULTURE_LATIN 0

#Defina RASTER_FONTTYPE 0x0001
#Defina DEVICE_FONTTYPE 0x002
#Defina TRUETYPE_FONTTYPE 0x004

#Defina RGB(r,g,b) ((COLORREF)(((BYTE)(r)|((WORD)((BYTE)(g))<<8))|(((DWORD)(BYTE)(b))<<16)))
#Defina PALETTERGB(r,g,b) (0x02000000 | RGB(r,g,b))
#Defina PALETTEINDEX(i) ((COLORREF)(0x01000000 | (DWORD)(WORD)(i)))

#Defina PC_RESERVED 0x01
#Defina PC_EXPLICIT 0x02
#Defina PC_NOCOLLAPSE 0x04

#Defina GetRValue(rgb) (LOBYTE(rgb))
#Defina GetGValue(rgb) (LOBYTE(((WORD)(rgb)) >> 8))
#Defina GetBValue(rgb) (LOBYTE((rgb)>>16))

#Defina TRANSPARENT 1
#Defina OPAQUE 2
#Defina BKMODE_LAST 2

#Defina GM_COMPATIBLE 1
#Defina GM_ADVANCED 2
#Defina GM_LAST 2

#Defina PT_CLOSEFIGURE 0x01
#Defina PT_LINETO 0x02
#Defina PT_BEZIERTO 0x04
#Defina PT_MOVETO 0x06

#Defina MM_TEXT 1
#Defina MM_LOMETRIC 2
#Defina MM_HIMETRIC 3
#Defina MM_LOENGLISH 4
#Defina MM_HIENGLISH 5
#Defina MM_TWIPS 6
#Defina MM_ISOTROPIC 7
#Defina MM_ANISOTROPIC 8

#Defina MM_MIN MM_TEXT
#Defina MM_MAX MM_ANISOTROPIC
#Defina MM_MAX_FIXEDSCALE MM_TWIPS

#Defina ABSOLUTE 1
#Defina RELATIVE 2

#Defina WHITE_BRUSH 0
#Defina LTGRAY_BRUSH 1
#Defina GRAY_BRUSH 2
#Defina DKGRAY_BRUSH 3
#Defina BLACK_BRUSH 4
#Defina NULL_BRUSH 5
#Defina HOLLOW_BRUSH NULL_BRUSH
#Defina WHITE_PEN 6
#Defina BLACK_PEN 7
#Defina NULL_PEN 8
#Defina OEM_FIXED_FONT 10
#Defina ANSI_FIXED_FONT 11
#Defina ANSI_VAR_FONT 12
#Defina SYSTEM_FONT 13
#Defina DEVICE_DEFAULT_FONT 14
#Defina DEFAULT_PALETTE 15
#Defina SYSTEM_FIXED_FONT 16

#Defina DEFAULT_GUI_FONT 17

#Defina DC_BRUSH 18
#Defina DC_PEN 19

#Defina STOCK_LAST 19

#Defina CLR_INVALID 0xFFFFFFFF

#Defina BS_SOLID 0
#Defina BS_NULL 1
#Defina BS_HOLLOW BS_NULL
#Defina BS_HATCHED 2
#Defina BS_PATTERN 3
#Defina BS_INDEXED 4
#Defina BS_DIBPATTERN 5
#Defina BS_DIBPATTERNPT 6
#Defina BS_PATTERN8X8 7
#Defina BS_DIBPATTERN8X8 8
#Defina BS_MONOPATTERN 9

#Defina HS_HORIZONTAL 0
#Defina HS_VERTICAL 1
#Defina HS_FDIAGONAL 2
#Defina HS_BDIAGONAL 3
#Defina HS_CROSS 4
#Defina HS_DIAGCROSS 5

#Defina PS_SOLID 0
#Defina PS_DASH 1
#Defina PS_DOT 2
#Defina PS_DASHDOT 3
#Defina PS_DASHDOTDOT 4
#Defina PS_NULL 5
#Defina PS_INSIDEFRAME 6
#Defina PS_USERSTYLE 7
#Defina PS_ALTERNATE 8
#Defina PS_STYLE_MASK 0x0000000F

#Defina PS_ENDCAP_ROUND 0x00000000
#Defina PS_ENDCAP_SQUARE 0x00000100
#Defina PS_ENDCAP_FLAT 0x00000200
#Defina PS_ENDCAP_MASK 0x00000F00

#Defina PS_JOIN_ROUND 0x00000000
#Defina PS_JOIN_BEVEL 0x00001000
#Defina PS_JOIN_MITER 0x00002000
#Defina PS_JOIN_MASK 0x0000F000

#Defina PS_COSMETIC 0x00000000
#Defina PS_GEOMETRIC 0x00010000
#Defina PS_TYPE_MASK 0x000F0000

#Defina AD_COUNTERCLOCKWISE 1
#Defina AD_CLOCKWISE 2

#Defina DRIVERVERSION 0
#Defina TECHNOLOGY 2
#Defina HORZSIZE 4
#Defina VERTSIZE 6
#Defina HORZRES 8
#Defina VERTRES 10
#Defina BITSPIXEL 12
#Defina PLANES 14
#Defina NUMBRUSHES 16
#Defina NUMPENS 18
#Defina NUMMARKERS 20
#Defina NUMFONTS 22
#Defina NUMCOLORS 24
#Defina PDEVICESIZE 26
#Defina CURVECAPS 28
#Defina LINECAPS 30
#Defina POLYGONALCAPS 32
#Defina TEXTCAPS 34
#Defina CLIPCAPS 36
#Defina RASTERCAPS 38
#Defina ASPECTX 40
#Defina ASPECTY 42
#Defina ASPECTXY 44

#Defina LOGPIXELSX 88
#Defina LOGPIXELSY 90

#Defina SIZEPALETTE 104
#Defina NUMRESERVED 106
#Defina COLORRES 108

#Defina PHYSICALWIDTH 110
#Defina PHYSICALHEIGHT 111
#Defina PHYSICALOFFSETX 112
#Defina PHYSICALOFFSETY 113
#Defina SCALINGFACTORX 114
#Defina SCALINGFACTORY 115

#Defina VREFRESH 116

#Defina DESKTOPVERTRES 117

#Defina DESKTOPHORZRES 118

#Defina BLTALIGNMENT 119

#Defina SHADEBLENDCAPS 120
#Defina COLORMGMTCAPS 121

#SenãoDefinido NOGDICAPMASKS
#Defina DT_PLOTTER 0
#Defina DT_RASDISPLAY 1
#Defina DT_RASPRINTER 2
#Defina DT_RASCAMERA 3
#Defina DT_CHARSTREAM 4
#Defina DT_METAFILE 5
#Defina DT_DISPFILE 6

#Defina CC_NONE 0
#Defina CC_CIRCLES 1
#Defina CC_PIE 2
#Defina CC_CHORD 4
#Defina CC_ELLIPSES 8
#Defina CC_WIDE 16
#Defina CC_STYLED 32
#Defina CC_WIDESTYLED 64
#Defina CC_INTERIORS 128
#Defina CC_ROUNDRECT 256

#Defina LC_NONE 0
#Defina LC_POLYLINE 2
#Defina LC_MARKER 4
#Defina LC_POLYMARKER 8
#Defina LC_WIDE 16
#Defina LC_STYLED 32
#Defina LC_WIDESTYLED 64
#Defina LC_INTERIORS 128

#Defina PC_NONE 0
#Defina PC_POLYGON 1
#Defina PC_RECTANGLE 2
#Defina PC_WINDPOLYGON 4
#Defina PC_TRAPEZOID 4
#Defina PC_SCANLINE 8
#Defina PC_WIDE 16
#Defina PC_STYLED 32
#Defina PC_WIDESTYLED 64
#Defina PC_INTERIORS 128
#Defina PC_POLYPOLYGON 256
#Defina PC_PATHS 512

#Defina CP_NONE 0
#Defina CP_RECTANGLE 1
#Defina CP_REGION 2

#Defina TC_OP_CHARACTER 0x00000001
#Defina TC_OP_STROKE 0x00000002
#Defina TC_CP_STROKE 0x00000004
#Defina TC_CR_90 0x00000008
#Defina TC_CR_ANY 0x00000010
#Defina TC_SF_X_YINDEP 0x00000020
#Defina TC_SA_DOUBLE 0x00000040
#Defina TC_SA_INTEGER 0x00000080
#Defina TC_SA_CONTIN 0x00000100
#Defina TC_EA_DOUBLE 0x00000200
#Defina TC_IA_ABLE 0x00000400
#Defina TC_UA_ABLE 0x00000800
#Defina TC_SO_ABLE 0x00001000
#Defina TC_RA_ABLE 0x00002000
#Defina TC_VA_ABLE 0x00004000
#Defina TC_RESERVED 0x00008000
#Defina TC_SCROLLBLT 0x00010000
#FimSe

#Defina RC_NONE
#Defina RC_BITBLT 1
#Defina RC_BANDING 2
#Defina RC_SCALING 4
#Defina RC_BITMAP64 8
#Defina RC_GDI20_OUTPUT 0x0010
#Defina RC_GDI20_STATE 0x0020
#Defina RC_SAVEBITMAP 0x0040
#Defina RC_DI_BITMAP 0x0080
#Defina RC_PALETTE 0x0100
#Defina RC_DIBTODEV 0x0200
#Defina RC_BIGFONT 0x0400
#Defina RC_STRETCHBLT 0x0800
#Defina RC_FLOODFILL 0x1000
#Defina RC_STRETCHDIB 0x2000
#Defina RC_OP_DX_OUTPUT 0x4000
#Defina RC_DEVBITS 0x8000

#Defina SB_NONE 0x00000000
#Defina SB_CONST_ALPHA 0x00000001
#Defina SB_PIXEL_ALPHA 0x00000002
#Defina SB_PREMULT_ALPHA 0x00000004

#Defina SB_GRAD_RECT 0x00000010
#Defina SB_GRAD_TRI 0x00000020

#Defina CM_NONE 0x00000000
#Defina CM_DEVICE_ICM 0x00000001
#Defina CM_GAMMA_RAMP 0x00000002
#Defina CM_CMYK_COLOR 0x00000004

#Defina DIB_RGB_COLORS 0
#Defina DIB_PAL_COLORS 1

#Defina SYSPAL_ERROR 0
#Defina SYSPAL_STATIC 1
#Defina SYSPAL_NOSTATIC 2
#Defina SYSPAL_NOSTATIC256 3

#Defina CBM_INIT 0x04L

#Defina FLOODFILLBORDER 0
#Defina FLOODFILLSURFACE 1

#Defina CCHDEVICENAME 32

#Defina CCHFORMNAME 32

  Tipo Estrutura _devicemodeA {
    BYTE dmDeviceName[CCHDEVICENAME];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    União {
      Estrutura {
        Curto dmOrientation;
        Curto dmPaperSize;
        Curto dmPaperLength;
        Curto dmPaperWidth;
        Curto dmScale;
        Curto dmCopies;
        Curto dmDefaultSource;
        Curto dmPrintQuality;
      };
      Estrutura {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      };
    };
    Curto dmColor;
    Curto dmDuplex;
    Curto dmYResolution;
    Curto dmTTOption;
    Curto dmCollate;
    BYTE dmFormName[CCHFORMNAME];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    União {
      DWORD dmDisplayFlags;
      DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
  } DEVMODEA,*PDEVMODEA,*NPDEVMODEA,*LPDEVMODEA;

  Tipo Estrutura _devicemodeW {
    WCHAR dmDeviceName[CCHDEVICENAME];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    União {
      Estrutura {
        Curto dmOrientation;
        Curto dmPaperSize;
        Curto dmPaperLength;
        Curto dmPaperWidth;
        Curto dmScale;
        Curto dmCopies;
        Curto dmDefaultSource;
        Curto dmPrintQuality;
      };
      Estrutura {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      };
    };
    Curto dmColor;
    Curto dmDuplex;
    Curto dmYResolution;
    Curto dmTTOption;
    Curto dmCollate;
    WCHAR dmFormName[CCHFORMNAME];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    União {
      DWORD dmDisplayFlags;
      DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
  } DEVMODEW,*PDEVMODEW,*NPDEVMODEW,*LPDEVMODEW;
#SeDefinido UNICODE
  Tipo DEVMODEW DEVMODE;
  Tipo PDEVMODEW PDEVMODE;
  Tipo NPDEVMODEW NPDEVMODE;
  Tipo LPDEVMODEW LPDEVMODE;
#Senão
  Tipo DEVMODEA DEVMODE;
  Tipo PDEVMODEA PDEVMODE;
  Tipo NPDEVMODEA NPDEVMODE;
  Tipo LPDEVMODEA LPDEVMODE;
#FimSe

#Defina DM_SPECVERSION 0x0401

#Defina DM_ORIENTATION 0x00000001L
#Defina DM_PAPERSIZE 0x00000002L
#Defina DM_PAPERLENGTH 0x00000004L
#Defina DM_PAPERWIDTH 0x00000008L
#Defina DM_SCALE 0x00000010L
#Defina DM_POSITION 0x00000020L
#Defina DM_NUP 0x00000040L
#Defina DM_DISPLAYORIENTATION 0x00000080L
#Defina DM_COPIES 0x00000100L
#Defina DM_DEFAULTSOURCE 0x00000200L
#Defina DM_PRINTQUALITY 0x00000400L
#Defina DM_COLOR 0x00000800L
#Defina DM_DUPLEX 0x00001000L
#Defina DM_YRESOLUTION 0x00002000L
#Defina DM_TTOPTION 0x00004000L
#Defina DM_COLLATE 0x00008000L
#Defina DM_FORMNAME 0x00010000L
#Defina DM_LOGPIXELS 0x00020000L
#Defina DM_BITSPERPEL 0x00040000L
#Defina DM_PELSWIDTH 0x00080000L
#Defina DM_PELSHEIGHT 0x00100000L
#Defina DM_DISPLAYFLAGS 0x00200000L
#Defina DM_DISPLAYFREQUENCY 0x00400000L
#Defina DM_ICMMETHOD 0x00800000L
#Defina DM_ICMINTENT 0x01000000L
#Defina DM_MEDIATYPE 0x02000000L
#Defina DM_DITHERTYPE 0x04000000L
#Defina DM_PANNINGWIDTH 0x08000000L
#Defina DM_PANNINGHEIGHT 0x10000000L
#Defina DM_DISPLAYFIXEDOUTPUT 0x20000000L

#Defina DMORIENT_PORTRAIT 1
#Defina DMORIENT_LANDSCAPE 2

#Defina DMPAPER_FIRST DMPAPER_LETTER
#Defina DMPAPER_LETTER 1
#Defina DMPAPER_LETTERSMALL 2
#Defina DMPAPER_TABLOID 3
#Defina DMPAPER_LEDGER 4
#Defina DMPAPER_LEGAL 5
#Defina DMPAPER_STATEMENT 6
#Defina DMPAPER_EXECUTIVE 7
#Defina DMPAPER_A3 8
#Defina DMPAPER_A4 9
#Defina DMPAPER_A4SMALL 10
#Defina DMPAPER_A5 11
#Defina DMPAPER_B4 12
#Defina DMPAPER_B5 13
#Defina DMPAPER_FOLIO 14
#Defina DMPAPER_QUARTO 15
#Defina DMPAPER_10X14 16
#Defina DMPAPER_11X17 17
#Defina DMPAPER_NOTE 18
#Defina DMPAPER_ENV_9 19
#Defina DMPAPER_ENV_10 20
#Defina DMPAPER_ENV_11 21
#Defina DMPAPER_ENV_12 22
#Defina DMPAPER_ENV_14 23
#Defina DMPAPER_CSHEET 24
#Defina DMPAPER_DSHEET 25
#Defina DMPAPER_ESHEET 26
#Defina DMPAPER_ENV_DL 27
#Defina DMPAPER_ENV_C5 28
#Defina DMPAPER_ENV_C3 29
#Defina DMPAPER_ENV_C4 30
#Defina DMPAPER_ENV_C6 31
#Defina DMPAPER_ENV_C65 32
#Defina DMPAPER_ENV_B4 33
#Defina DMPAPER_ENV_B5 34
#Defina DMPAPER_ENV_B6 35
#Defina DMPAPER_ENV_ITALY 36
#Defina DMPAPER_ENV_MONARCH 37
#Defina DMPAPER_ENV_PERSONAL 38
#Defina DMPAPER_FANFOLD_US 39
#Defina DMPAPER_FANFOLD_STD_GERMAN 40
#Defina DMPAPER_FANFOLD_LGL_GERMAN 41
#Defina DMPAPER_ISO_B4 42
#Defina DMPAPER_JAPANESE_POSTCARD 43
#Defina DMPAPER_9X11 44
#Defina DMPAPER_10X11 45
#Defina DMPAPER_15X11 46
#Defina DMPAPER_ENV_INVITE 47
#Defina DMPAPER_RESERVED_48 48
#Defina DMPAPER_RESERVED_49 49
#Defina DMPAPER_LETTER_EXTRA 50
#Defina DMPAPER_LEGAL_EXTRA 51
#Defina DMPAPER_TABLOID_EXTRA 52
#Defina DMPAPER_A4_EXTRA 53
#Defina DMPAPER_LETTER_TRANSVERSE 54
#Defina DMPAPER_A4_TRANSVERSE 55
#Defina DMPAPER_LETTER_EXTRA_TRANSVERSE 56
#Defina DMPAPER_A_PLUS 57
#Defina DMPAPER_B_PLUS 58
#Defina DMPAPER_LETTER_PLUS 59
#Defina DMPAPER_A4_PLUS 60
#Defina DMPAPER_A5_TRANSVERSE 61
#Defina DMPAPER_B5_TRANSVERSE 62
#Defina DMPAPER_A3_EXTRA 63
#Defina DMPAPER_A5_EXTRA 64
#Defina DMPAPER_B5_EXTRA 65
#Defina DMPAPER_A2 66
#Defina DMPAPER_A3_TRANSVERSE 67
#Defina DMPAPER_A3_EXTRA_TRANSVERSE 68
#Defina DMPAPER_DBL_JAPANESE_POSTCARD 69
#Defina DMPAPER_A6 70
#Defina DMPAPER_JENV_KAKU2 71
#Defina DMPAPER_JENV_KAKU3 72
#Defina DMPAPER_JENV_CHOU3 73
#Defina DMPAPER_JENV_CHOU4 74
#Defina DMPAPER_LETTER_ROTATED 75
#Defina DMPAPER_A3_ROTATED 76
#Defina DMPAPER_A4_ROTATED 77
#Defina DMPAPER_A5_ROTATED 78
#Defina DMPAPER_B4_JIS_ROTATED 79
#Defina DMPAPER_B5_JIS_ROTATED 80
#Defina DMPAPER_JAPANESE_POSTCARD_ROTATED 81
#Defina DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED 82
#Defina DMPAPER_A6_ROTATED 83
#Defina DMPAPER_JENV_KAKU2_ROTATED 84
#Defina DMPAPER_JENV_KAKU3_ROTATED 85
#Defina DMPAPER_JENV_CHOU3_ROTATED 86
#Defina DMPAPER_JENV_CHOU4_ROTATED 87
#Defina DMPAPER_B6_JIS 88
#Defina DMPAPER_B6_JIS_ROTATED 89
#Defina DMPAPER_12X11 90
#Defina DMPAPER_JENV_YOU4 91
#Defina DMPAPER_JENV_YOU4_ROTATED 92
#Defina DMPAPER_P16K 93
#Defina DMPAPER_P32K 94
#Defina DMPAPER_P32KBIG 95
#Defina DMPAPER_PENV_1 96
#Defina DMPAPER_PENV_2 97
#Defina DMPAPER_PENV_3 98
#Defina DMPAPER_PENV_4 99
#Defina DMPAPER_PENV_5 100
#Defina DMPAPER_PENV_6 101
#Defina DMPAPER_PENV_7 102
#Defina DMPAPER_PENV_8 103
#Defina DMPAPER_PENV_9 104
#Defina DMPAPER_PENV_10 105
#Defina DMPAPER_P16K_ROTATED 106
#Defina DMPAPER_P32K_ROTATED 107
#Defina DMPAPER_P32KBIG_ROTATED 108
#Defina DMPAPER_PENV_1_ROTATED 109
#Defina DMPAPER_PENV_2_ROTATED 110
#Defina DMPAPER_PENV_3_ROTATED 111
#Defina DMPAPER_PENV_4_ROTATED 112
#Defina DMPAPER_PENV_5_ROTATED 113
#Defina DMPAPER_PENV_6_ROTATED 114
#Defina DMPAPER_PENV_7_ROTATED 115
#Defina DMPAPER_PENV_8_ROTATED 116
#Defina DMPAPER_PENV_9_ROTATED 117
#Defina DMPAPER_PENV_10_ROTATED 118

#Defina DMPAPER_LAST DMPAPER_PENV_10_ROTATED

#Defina DMPAPER_USER 256

#Defina DMBIN_FIRST DMBIN_UPPER
#Defina DMBIN_UPPER 1
#Defina DMBIN_ONLYONE 1
#Defina DMBIN_LOWER 2
#Defina DMBIN_MIDDLE 3
#Defina DMBIN_MANUAL 4
#Defina DMBIN_ENVELOPE 5
#Defina DMBIN_ENVMANUAL 6
#Defina DMBIN_AUTO 7
#Defina DMBIN_TRACTOR 8
#Defina DMBIN_SMALLFMT 9
#Defina DMBIN_LARGEFMT 10
#Defina DMBIN_LARGECAPACITY 11
#Defina DMBIN_CASSETTE 14
#Defina DMBIN_FORMSOURCE 15
#Defina DMBIN_LAST DMBIN_FORMSOURCE

#Defina DMBIN_USER 256

#Defina DMRES_DRAFT (-1)
#Defina DMRES_LOW (-2)
#Defina DMRES_MEDIUM (-3)
#Defina DMRES_HIGH (-4)

#Defina DMCOLOR_MONOCHROME 1
#Defina DMCOLOR_COLOR 2

#Defina DMDUP_SIMPLEX 1
#Defina DMDUP_VERTICAL 2
#Defina DMDUP_HORIZONTAL 3

#Defina DMTT_BITMAP 1
#Defina DMTT_DOWNLOAD 2
#Defina DMTT_SUBDEV 3
#Defina DMTT_DOWNLOAD_OUTLINE 4

#Defina DMCOLLATE_FALSE 0
#Defina DMCOLLATE_TRUE 1

#Defina DMDO_DEFAULT 0
#Defina DMDO_90 1
#Defina DMDO_180 2
#Defina DMDO_270 3

#Defina DMDFO_DEFAULT 0
#Defina DMDFO_STRETCH 1
#Defina DMDFO_CENTER 2

#Defina DMDISPLAYFLAGS_TEXTMODE 0x00000004

#Defina DMNUP_SYSTEM 1
#Defina DMNUP_ONEUP 2

#Defina DMICMMETHOD_NONE 1
#Defina DMICMMETHOD_SYSTEM 2
#Defina DMICMMETHOD_DRIVER 3
#Defina DMICMMETHOD_DEVICE 4

#Defina DMICMMETHOD_USER 256

#Defina DMICM_SATURATE 1
#Defina DMICM_CONTRAST 2
#Defina DMICM_COLORIMETRIC 3
#Defina DMICM_ABS_COLORIMETRIC 4

#Defina DMICM_USER 256

#Defina DMMEDIA_STANDARD 1
#Defina DMMEDIA_TRANSPARENCY 2
#Defina DMMEDIA_GLOSSY 3

#Defina DMMEDIA_USER 256

#Defina DMDITHER_NONE 1
#Defina DMDITHER_COARSE 2
#Defina DMDITHER_FINE 3
#Defina DMDITHER_LINEART 4
#Defina DMDITHER_ERRORDIFFUSION 5
#Defina DMDITHER_RESERVED6 6
#Defina DMDITHER_RESERVED7 7
#Defina DMDITHER_RESERVED8 8
#Defina DMDITHER_RESERVED9 9
#Defina DMDITHER_GRAYSCALE 10

#Defina DMDITHER_USER 256

  Tipo Estrutura _DISPLAY_DEVICEA {
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
  } DISPLAY_DEVICEA,*PDISPLAY_DEVICEA,*LPDISPLAY_DEVICEA;
  Tipo Estrutura _DISPLAY_DEVICEW {
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
  } DISPLAY_DEVICEW,*PDISPLAY_DEVICEW,*LPDISPLAY_DEVICEW;
#SeDefinido UNICODE
  Tipo DISPLAY_DEVICEW DISPLAY_DEVICE;
  Tipo PDISPLAY_DEVICEW PDISPLAY_DEVICE;
  Tipo LPDISPLAY_DEVICEW LPDISPLAY_DEVICE;
#Senão
  Tipo DISPLAY_DEVICEA DISPLAY_DEVICE;
  Tipo PDISPLAY_DEVICEA PDISPLAY_DEVICE;
  Tipo LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
#FimSe

#Defina DISPLAY_DEVICE_ATTACHED_TO_DESKTOP 0x00000001
#Defina DISPLAY_DEVICE_MULTI_DRIVER 0x00000002
#Defina DISPLAY_DEVICE_PRIMARY_DEVICE 0x00000004
#Defina DISPLAY_DEVICE_MIRRORING_DRIVER 0x00000008
#Defina DISPLAY_DEVICE_VGA_COMPATIBLE 0x00000010
#Defina DISPLAY_DEVICE_REMOVABLE 0x00000020
#Defina DISPLAY_DEVICE_MODESPRUNED 0x08000000
#Defina DISPLAY_DEVICE_REMOTE 0x04000000
#Defina DISPLAY_DEVICE_DISCONNECT 0x02000000

#Defina DISPLAY_DEVICE_ACTIVE 0x00000001
#Defina DISPLAY_DEVICE_ATTACHED 0x00000002

#Defina RDH_RECTANGLES 1

  Tipo Estrutura _RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
  } RGNDATAHEADER,*PRGNDATAHEADER;

  Tipo Estrutura _RGNDATA {
    RGNDATAHEADER rdh;
    Caractere Buffer[1];
  } RGNDATA,*PRGNDATA,*NPRGNDATA,*LPRGNDATA;

#Defina SYSRGN 4

  Tipo Estrutura _ABC {
    Inteiro abcA;
    UINT abcB;
    Inteiro abcC;
  } ABC,*PABC,*NPABC,*LPABC;

  Tipo Estrutura _ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
  } ABCFLOAT,*PABCFLOAT,*NPABCFLOAT,*LPABCFLOAT;

#SenãoDefinido NOTEXTMETRIC

  Tipo Estrutura _OUTLINETEXTMETRICA {
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    Inteiro otmsCharSlopeRise;
    Inteiro otmsCharSlopeRun;
    Inteiro otmItalicAngle;
    UINT otmEMSquare;
    Inteiro otmAscent;
    Inteiro otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    Inteiro otmMacAscent;
    Inteiro otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    Inteiro otmsStrikeoutPosition;
    Inteiro otmsUnderscoreSize;
    Inteiro otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
  } OUTLINETEXTMETRICA,*POUTLINETEXTMETRICA,*NPOUTLINETEXTMETRICA,*LPOUTLINETEXTMETRICA;

  Tipo Estrutura _OUTLINETEXTMETRICW {
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    Inteiro otmsCharSlopeRise;
    Inteiro otmsCharSlopeRun;
    Inteiro otmItalicAngle;
    UINT otmEMSquare;
    Inteiro otmAscent;
    Inteiro otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    Inteiro otmMacAscent;
    Inteiro otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    Inteiro otmsStrikeoutPosition;
    Inteiro otmsUnderscoreSize;
    Inteiro otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
  } OUTLINETEXTMETRICW,*POUTLINETEXTMETRICW,*NPOUTLINETEXTMETRICW,*LPOUTLINETEXTMETRICW;
#SeDefinido UNICODE
  Tipo OUTLINETEXTMETRICW OUTLINETEXTMETRIC;
  Tipo POUTLINETEXTMETRICW POUTLINETEXTMETRIC;
  Tipo NPOUTLINETEXTMETRICW NPOUTLINETEXTMETRIC;
  Tipo LPOUTLINETEXTMETRICW LPOUTLINETEXTMETRIC;
#Senão
  Tipo OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
  Tipo POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
  Tipo NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
  Tipo LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
#FimSe
#FimSe

  Tipo Estrutura tagPOLYTEXTA {
    Inteiro x;
    Inteiro y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    Inteiro *pdx;
  } POLYTEXTA,*PPOLYTEXTA,*NPPOLYTEXTA,*LPPOLYTEXTA;

  Tipo Estrutura tagPOLYTEXTW {
    Inteiro x;
    Inteiro y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    Inteiro *pdx;
  } POLYTEXTW,*PPOLYTEXTW,*NPPOLYTEXTW,*LPPOLYTEXTW;
#SeDefinido UNICODE
  Tipo POLYTEXTW POLYTEXT;
  Tipo PPOLYTEXTW PPOLYTEXT;
  Tipo NPPOLYTEXTW NPPOLYTEXT;
  Tipo LPPOLYTEXTW LPPOLYTEXT;
#Senão
  Tipo POLYTEXTA POLYTEXT;
  Tipo PPOLYTEXTA PPOLYTEXT;
  Tipo NPPOLYTEXTA NPPOLYTEXT;
  Tipo LPPOLYTEXTA LPPOLYTEXT;
#FimSe

  Tipo Estrutura _FIXED {
    WORD fract;
    Curto value;
  } FIXED;

  Tipo Estrutura _MAT2 {
    FIXED eM11;
    FIXED eM12;
    FIXED eM21;
    FIXED eM22;
  } MAT2,*LPMAT2;

  Tipo Estrutura _GLYPHMETRICS {
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    Curto gmCellIncX;
    Curto gmCellIncY;
  } GLYPHMETRICS,*LPGLYPHMETRICS;

#Defina GGO_METRICS 0
#Defina GGO_BITMAP 1
#Defina GGO_NATIVE 2
#Defina GGO_BEZIER 3

#Defina GGO_GRAY2_BITMAP 4
#Defina GGO_GRAY4_BITMAP 5
#Defina GGO_GRAY8_BITMAP 6
#Defina GGO_GLYPH_INDEX 0x0080
#Defina GGO_UNHINTED 0x0100

#Defina TT_POLYGON_TYPE 24

#Defina TT_PRIM_LINE 1
#Defina TT_PRIM_QSPLINE 2
#Defina TT_PRIM_CSPLINE 3

  Tipo Estrutura tagPOINTFX {
    FIXED x;
    FIXED y;
  } POINTFX,*LPPOINTFX;

  Tipo Estrutura tagTTPOLYCURVE {
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
  } TTPOLYCURVE,*LPTTPOLYCURVE;

  Tipo Estrutura tagTTPOLYGONHEADER {
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
  } TTPOLYGONHEADER,*LPTTPOLYGONHEADER;

#Defina GCP_DBCS 0x0001
#Defina GCP_REORDER 0x0002
#Defina GCP_USEKERNING 0x0008
#Defina GCP_GLYPHSHAPE 0x0010
#Defina GCP_LIGATE 0x0020

#Defina GCP_DIACRITIC 0x0100
#Defina GCP_KASHIDA 0x0400
#Defina GCP_ERROR 0x8000
#Defina FLI_MASK 0x103B

#Defina GCP_JUSTIFY 0x00010000L

#Defina FLI_GLYPHS 0x00040000L
#Defina GCP_CLASSIN 0x00080000L
#Defina GCP_MAXEXTENT 0x00100000L
#Defina GCP_JUSTIFYIN 0x00200000L
#Defina GCP_DISPLAYZWG 0x00400000L
#Defina GCP_SYMSWAPOFF 0x00800000L
#Defina GCP_NUMERICOVERRIDE 0x01000000L
#Defina GCP_NEUTRALOVERRIDE 0x02000000L
#Defina GCP_NUMERICSLATIN 0x04000000L
#Defina GCP_NUMERICSLOCAL 0x08000000L

#Defina GCPCLASS_LATIN 1
#Defina GCPCLASS_HEBREW 2
#Defina GCPCLASS_ARABIC 2
#Defina GCPCLASS_NEUTRAL 3
#Defina GCPCLASS_LOCALNUMBER 4
#Defina GCPCLASS_LATINNUMBER 5
#Defina GCPCLASS_LATINNUMERICTERMINATOR 6
#Defina GCPCLASS_LATINNUMERICSEPARATOR 7
#Defina GCPCLASS_NUMERICSEPARATOR 8
#Defina GCPCLASS_PREBOUNDLTR 0x80
#Defina GCPCLASS_PREBOUNDRTL 0x40
#Defina GCPCLASS_POSTBOUNDLTR 0x20
#Defina GCPCLASS_POSTBOUNDRTL 0x10

#Defina GCPGLYPH_LINKBEFORE 0x8000
#Defina GCPGLYPH_LINKAFTER 0x4000

  Tipo Estrutura tagGCP_RESULTSA {
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT *lpOrder;
    Inteiro *lpDx;
    Inteiro *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    Inteiro nMaxFit;
  } GCP_RESULTSA,*LPGCP_RESULTSA;
  Tipo Estrutura tagGCP_RESULTSW {
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT *lpOrder;
    Inteiro *lpDx;
    Inteiro *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    Inteiro nMaxFit;
  } GCP_RESULTSW,*LPGCP_RESULTSW;
#SeDefinido UNICODE
  Tipo GCP_RESULTSW GCP_RESULTS;
  Tipo LPGCP_RESULTSW LPGCP_RESULTS;
#Senão
  Tipo GCP_RESULTSA GCP_RESULTS;
  Tipo LPGCP_RESULTSA LPGCP_RESULTS;
#FimSe

  Tipo Estrutura _RASTERIZER_STATUS {
    Curto nSize;
    Curto wFlags;
    Curto nLanguageID;
  } RASTERIZER_STATUS,*LPRASTERIZER_STATUS;

#Defina TT_AVAILABLE 0x0001
#Defina TT_ENABLED 0x0002

  Tipo Estrutura tagPIXELFORMATDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
  } PIXELFORMATDESCRIPTOR,*PPIXELFORMATDESCRIPTOR,*LPPIXELFORMATDESCRIPTOR;

#Defina PFD_TYPE_RGBA 0
#Defina PFD_TYPE_COLORINDEX 1

#Defina PFD_MAIN_PLANE 0
#Defina PFD_OVERLAY_PLANE 1
#Defina PFD_UNDERLAY_PLANE (-1)

#Defina PFD_DOUBLEBUFFER 0x00000001
#Defina PFD_STEREO 0x00000002
#Defina PFD_DRAW_TO_WINDOW 0x00000004
#Defina PFD_DRAW_TO_BITMAP 0x00000008
#Defina PFD_SUPPORT_GDI 0x00000010
#Defina PFD_SUPPORT_OPENGL 0x00000020
#Defina PFD_GENERIC_FORMAT 0x00000040
#Defina PFD_NEED_PALETTE 0x00000080
#Defina PFD_NEED_SYSTEM_PALETTE 0x00000100
#Defina PFD_SWAP_EXCHANGE 0x00000200
#Defina PFD_SWAP_COPY 0x00000400
#Defina PFD_SWAP_LAYER_BUFFERS 0x00000800
#Defina PFD_GENERIC_ACCELERATED 0x00001000
#Defina PFD_SUPPORT_DIRECTDRAW 0x00002000

#Defina PFD_DEPTH_DONTCARE 0x20000000
#Defina PFD_DOUBLEBUFFER_DONTCARE 0x40000000
#Defina PFD_STEREO_DONTCARE 0x80000000

#SenãoDefinido NOTEXTMETRIC
  Tipo Inteiro (CALLBACK *OLDFONTENUMPROCA)(CONST LOGFONTA *,CONST TEXTMETRICA *,DWORD,LPARAM);
  Tipo Inteiro (CALLBACK *OLDFONTENUMPROCW)(CONST LOGFONTW *,CONST TEXTMETRICW *,DWORD,LPARAM);
#SeDefinido UNICODE
#Defina OLDFONTENUMPROC OLDFONTENUMPROCW
#Senão
#Defina OLDFONTENUMPROC OLDFONTENUMPROCA
#FimSe
#Senão
  Tipo Inteiro (CALLBACK *OLDFONTENUMPROCA)(CONST LOGFONTA *,CONST VOID *,DWORD,LPARAM);
  Tipo Inteiro (CALLBACK *OLDFONTENUMPROCW)(CONST LOGFONTW *,CONST VOID *,DWORD,LPARAM);
#SeDefinido UNICODE
#Defina OLDFONTENUMPROC OLDFONTENUMPROCW
#Senão
#Defina OLDFONTENUMPROC OLDFONTENUMPROCA
#FimSe
#FimSe

  Tipo OLDFONTENUMPROCA FONTENUMPROCA;
  Tipo OLDFONTENUMPROCW FONTENUMPROCW;
#SeDefinido UNICODE
  Tipo FONTENUMPROCW FONTENUMPROC;
#Senão
  Tipo FONTENUMPROCA FONTENUMPROC;
#FimSe

  Tipo Inteiro (CALLBACK *GOBJENUMPROC)(LPVOID,LPARAM);
  Tipo VOID (CALLBACK *LINEDDAPROC)(Inteiro,Inteiro,LPARAM);

#SeDefinido UNICODE
#Defina AddFontResource AddFontResourceW
#Defina CopyMetaFile CopyMetaFileW
#Defina CreateDC CreateDCW
#Defina CreateFontIndirect CreateFontIndirectW
#Defina CreateFont CreateFontW
#Defina CreateIC CreateICW
#Defina CreateMetaFile CreateMetaFileW
#Defina CreateScalableFontResource CreateScalableFontResourceW
#Senão
#Defina AddFontResource AddFontResourceA
#Defina CopyMetaFile CopyMetaFileA
#Defina CreateDC CreateDCA
#Defina CreateFontIndirect CreateFontIndirectA
#Defina CreateFont CreateFontA
#Defina CreateIC CreateICA
#Defina CreateMetaFile CreateMetaFileA
#Defina CreateScalableFontResource CreateScalableFontResourceA
#FimSe

  WINGDIAPI Inteiro WINAPI AddFontResourceA(LPCSTR);
  WINGDIAPI Inteiro WINAPI AddFontResourceW(LPCWSTR);
  WINGDIAPI WINBOOL WINAPI AnimatePalette(HPALETTE hPal,UINT iStartIndex,UINT cEntries,CONST PALETTEENTRY *ppe);
  WINGDIAPI WINBOOL WINAPI Arc(HDC hdc,Inteiro x1,Inteiro y1,Inteiro x2,Inteiro y2,Inteiro x3,Inteiro y3,Inteiro x4,Inteiro y4);
  WINGDIAPI WINBOOL WINAPI BitBlt(HDC hdc,Inteiro x,Inteiro y,Inteiro cx,Inteiro cy,HDC hdcSrc,Inteiro x1,Inteiro y1,DWORD rop);
  WINGDIAPI WINBOOL WINAPI CancelDC(HDC hdc);
  WINGDIAPI WINBOOL WINAPI Chord(HDC hdc,Inteiro x1,Inteiro y1,Inteiro x2,Inteiro y2,Inteiro x3,Inteiro y3,Inteiro x4,Inteiro y4);
  WINGDIAPI Inteiro WINAPI ChoosePixelFormat(HDC hdc,CONST PIXELFORMATDESCRIPTOR *ppfd);
  WINGDIAPI HMETAFILE WINAPI CloseMetaFile(HDC hdc);
  WINGDIAPI Inteiro WINAPI CombineRgn(HRGN hrgnDst,HRGN hrgnSrc1,HRGN hrgnSrc2,Inteiro iMode);
  WINGDIAPI HMETAFILE WINAPI CopyMetaFileA(HMETAFILE,LPCSTR);
  WINGDIAPI HMETAFILE WINAPI CopyMetaFileW(HMETAFILE,LPCWSTR);
  WINGDIAPI HBITMAP WINAPI CreateBitmap(Inteiro nWidth,Inteiro nHeight,UINT nPlanes,UINT nBitCount,CONST VOID *lpBits);
  WINGDIAPI HBITMAP WINAPI CreateBitmapIndirect(CONST BITMAP *pbm);
  WINGDIAPI HBRUSH WINAPI CreateBrushIndirect(CONST LOGBRUSH *plbrush);
  WINGDIAPI HBITMAP WINAPI CreateCompatibleBitmap(HDC hdc,Inteiro cx,Inteiro cy);
  WINGDIAPI HBITMAP WINAPI CreateDiscardableBitmap(HDC hdc,Inteiro cx,Inteiro cy);
  WINGDIAPI HDC WINAPI CreateCompatibleDC(HDC hdc);
  WINGDIAPI HDC WINAPI CreateDCA(LPCSTR pwszDriver,LPCSTR pwszDevice,LPCSTR pszPort,CONST DEVMODEA *pdm);
  WINGDIAPI HDC WINAPI CreateDCW(LPCWSTR pwszDriver,LPCWSTR pwszDevice,LPCWSTR pszPort,CONST DEVMODEW *pdm);
  WINGDIAPI HBITMAP WINAPI CreateDIBitmap(HDC hdc,CONST BITMAPINFOHEADER *pbmih,DWORD flInit,CONST VOID *pjBits,CONST BITMAPINFO *pbmi,UINT iUsage);
  WINGDIAPI HBRUSH WINAPI CreateDIBPatternBrush(HGLOBAL h,UINT iUsage);
  WINGDIAPI HBRUSH WINAPI CreateDIBPatternBrushPt(CONST VOID *lpPackedDIB,UINT iUsage);
  WINGDIAPI HRGN WINAPI CreateEllipticRgn(Inteiro x1,Inteiro y1,Inteiro x2,Inteiro y2);
  WINGDIAPI HRGN WINAPI CreateEllipticRgnIndirect(CONST RECT *lprect);
  WINGDIAPI HFONT WINAPI CreateFontIndirectA(CONST LOGFONTA *lplf);
  WINGDIAPI HFONT WINAPI CreateFontIndirectW(CONST LOGFONTW *lplf);
  WINGDIAPI HFONT WINAPI CreateFontA(Inteiro cHeight,Inteiro cWidth,Inteiro cEscapement,Inteiro cOrientation,Inteiro cWeight,DWORD bItalic,DWORD bUnderline,DWORD bStrikeOut,DWORD iCharSet,DWORD iOutPrecision,DWORD iClipPrecision,DWORD iQuality,DWORD iPitchAndFamily,LPCSTR pszFaceName);
  WINGDIAPI HFONT WINAPI CreateFontW(Inteiro cHeight,Inteiro cWidth,Inteiro cEscapement,Inteiro cOrientation,Inteiro cWeight,DWORD bItalic,DWORD bUnderline,DWORD bStrikeOut,DWORD iCharSet,DWORD iOutPrecision,DWORD iClipPrecision,DWORD iQuality,DWORD iPitchAndFamily,LPCWSTR pszFaceName);
  WINGDIAPI HBRUSH WINAPI CreateHatchBrush(Inteiro iHatch,COLORREF color);
  WINGDIAPI HDC WINAPI CreateICA(LPCSTR pszDriver,LPCSTR pszDevice,LPCSTR pszPort,CONST DEVMODEA *pdm);
  WINGDIAPI HDC WINAPI CreateICW(LPCWSTR pszDriver,LPCWSTR pszDevice,LPCWSTR pszPort,CONST DEVMODEW *pdm);
  WINGDIAPI HDC WINAPI CreateMetaFileA(LPCSTR pszFile);
  WINGDIAPI HDC WINAPI CreateMetaFileW(LPCWSTR pszFile);
  WINGDIAPI HPALETTE WINAPI CreatePalette(CONST LOGPALETTE *plpal);
  WINGDIAPI HPEN WINAPI CreatePen(Inteiro iStyle,Inteiro cWidth,COLORREF color);
  WINGDIAPI HPEN WINAPI CreatePenIndirect(CONST LOGPEN *plpen);
  WINGDIAPI HRGN WINAPI CreatePolyPolygonRgn(CONST POINT *pptl,CONST INT *pc,Inteiro cPoly,Inteiro iMode);
  WINGDIAPI HBRUSH WINAPI CreatePatternBrush(HBITMAP hbm);
  WINGDIAPI HRGN WINAPI CreateRectRgn(Inteiro x1,Inteiro y1,Inteiro x2,Inteiro y2);
  WINGDIAPI HRGN WINAPI CreateRectRgnIndirect(CONST RECT *lprect);
  WINGDIAPI HRGN WINAPI CreateRoundRectRgn(Inteiro x1,Inteiro y1,Inteiro x2,Inteiro y2,Inteiro w,Inteiro h);
  WINGDIAPI WINBOOL WINAPI CreateScalableFontResourceA(DWORD fdwHidden,LPCSTR lpszFont,LPCSTR lpszFile,LPCSTR lpszPath);
  WINGDIAPI WINBOOL WINAPI CreateScalableFontResourceW(DWORD fdwHidden,LPCWSTR lpszFont,LPCWSTR lpszFile,LPCWSTR lpszPath);
  WINGDIAPI HBRUSH WINAPI CreateSolidBrush(COLORREF color);
  WINGDIAPI WINBOOL WINAPI DeleteDC(HDC hdc);
  WINGDIAPI WINBOOL WINAPI DeleteMetaFile(HMETAFILE hmf);
  WINGDIAPI WINBOOL WINAPI DeleteObject(HGDIOBJ ho);
  WINGDIAPI Inteiro WINAPI DescribePixelFormat(HDC hdc,Inteiro iPixelFormat,UINT nBytes,LPPIXELFORMATDESCRIPTOR ppfd);

  Tipo UINT (CALLBACK *LPFNDEVMODE)(HWND,HMODULE,LPDEVMODE,LPSTR,LPSTR,LPDEVMODE,LPSTR,UINT);
  Tipo DWORD (CALLBACK *LPFNDEVCAPS)(LPSTR,LPSTR,UINT,LPSTR,LPDEVMODE);

#Defina DM_UPDATE 1
#Defina DM_COPY 2
#Defina DM_PROMPT 4
#Defina DM_MODIFY 8

#Defina DM_IN_BUFFER DM_MODIFY
#Defina DM_IN_PROMPT DM_PROMPT
#Defina DM_OUT_BUFFER DM_COPY
#Defina DM_OUT_DEFAULT DM_UPDATE

#Defina DC_FIELDS 1
#Defina DC_PAPERS 2
#Defina DC_PAPERSIZE 3
#Defina DC_MINEXTENT 4
#Defina DC_MAXEXTENT 5
#Defina DC_BINS 6
#Defina DC_DUPLEX 7
#Defina DC_SIZE 8
#Defina DC_EXTRA 9
#Defina DC_VERSION 10
#Defina DC_DRIVER 11
#Defina DC_BINNAMES 12
#Defina DC_ENUMRESOLUTIONS 13
#Defina DC_FILEDEPENDENCIES 14
#Defina DC_TRUETYPE 15
#Defina DC_PAPERNAMES 16
#Defina DC_ORIENTATION 17
#Defina DC_COPIES 18
#Defina DC_BINADJUST 19
#Defina DC_EMF_COMPLIANT 20
#Defina DC_DATATYPE_PRODUCED 21
#Defina DC_COLLATE 22
#Defina DC_MANUFACTURER 23
#Defina DC_MODEL 24
#Defina DC_PERSONALITY 25
#Defina DC_PRINTRATE 26
#Defina DC_PRINTRATEUNIT 27
#Defina PRINTRATEUNIT_PPM 1
#Defina PRINTRATEUNIT_CPS 2
#Defina PRINTRATEUNIT_LPM 3
#Defina PRINTRATEUNIT_IPM 4
#Defina DC_PRINTERMEM 28
#Defina DC_MEDIAREADY 29
#Defina DC_STAPLE 30
#Defina DC_PRINTRATEPPM 31
#Defina DC_COLORDEVICE 32
#Defina DC_NUP 33
#Defina DC_MEDIATYPENAMES 34
#Defina DC_MEDIATYPES 35

#Defina DCTT_BITMAP 0x0000001L
#Defina DCTT_DOWNLOAD 0x0000002L
#Defina DCTT_SUBDEV 0x0000004L
#Defina DCTT_DOWNLOAD_OUTLINE 0x0000008L

#Defina DCBA_FACEUPNONE 0x0000
#Defina DCBA_FACEUPCENTER 0x0001
#Defina DCBA_FACEUPLEFT 0x0002
#Defina DCBA_FACEUPRIGHT 0x0003
#Defina DCBA_FACEDOWNNONE 0x0100
#Defina DCBA_FACEDOWNCENTER 0x0101
#Defina DCBA_FACEDOWNLEFT 0x0102
#Defina DCBA_FACEDOWNRIGHT 0x0103

#SeDefinido UNICODE
#Defina DeviceCapabilities DeviceCapabilitiesW
#Defina EnumFontFamiliesEx EnumFontFamiliesExW
#Defina EnumFontFamilies EnumFontFamiliesW
#Defina EnumFonts EnumFontsW
#Defina GetCharWidth GetCharWidthW
#Defina GetCharWidth32 GetCharWidth32W
#Defina GetCharWidthFloat GetCharWidthFloatW
#Defina GetCharABCWidths GetCharABCWidthsW
#Defina GetCharABCWidthsFloat GetCharABCWidthsFloatW
#Defina GetGlyphOutline GetGlyphOutlineW
#Defina GetMetaFile GetMetaFileW
#Senão
#Defina DeviceCapabilities DeviceCapabilitiesA
#Defina EnumFontFamiliesEx EnumFontFamiliesExA
#Defina EnumFontFamilies EnumFontFamiliesA
#Defina EnumFonts EnumFontsA
#Defina GetCharWidth GetCharWidthA
#Defina GetCharWidth32 GetCharWidth32A
#Defina GetCharWidthFloat GetCharWidthFloatA
#Defina GetCharABCWidths GetCharABCWidthsA
#Defina GetCharABCWidthsFloat GetCharABCWidthsFloatA
#Defina GetGlyphOutline GetGlyphOutlineA
#Defina GetMetaFile GetMetaFileA
#FimSe

  WINSPOOLAPI Inteiro WINAPI DeviceCapabilitiesA(LPCSTR pDevice,LPCSTR pPort,WORD fwCapability,LPSTR pOutput,CONST DEVMODEA *pDevMode);
  WINSPOOLAPI Inteiro WINAPI DeviceCapabilitiesW(LPCWSTR pDevice,LPCWSTR pPort,WORD fwCapability,LPWSTR pOutput,CONST DEVMODEW *pDevMode);
  WINGDIAPI Inteiro WINAPI DrawEscape(HDC hdc,Inteiro iEscape,Inteiro cjIn,LPCSTR lpIn);
  WINGDIAPI WINBOOL WINAPI Ellipse(HDC hdc,Inteiro left,Inteiro top,Inteiro right,Inteiro bottom);
  WINGDIAPI Inteiro WINAPI EnumFontFamiliesExA(HDC hdc,LPLOGFONTA lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam,DWORD dwFlags);
  WINGDIAPI Inteiro WINAPI EnumFontFamiliesExW(HDC hdc,LPLOGFONTW lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam,DWORD dwFlags);
  WINGDIAPI Inteiro WINAPI EnumFontFamiliesA(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam);
  WINGDIAPI Inteiro WINAPI EnumFontFamiliesW(HDC hdc,LPCWSTR lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam);
  WINGDIAPI Inteiro WINAPI EnumFontsA(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam);
  WINGDIAPI Inteiro WINAPI EnumFontsW(HDC hdc,LPCWSTR lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam);
  WINGDIAPI Inteiro WINAPI EnumObjects(HDC hdc,Inteiro nType,GOBJENUMPROC lpFunc,LPARAM lParam);
  WINGDIAPI WINBOOL WINAPI EqualRgn(HRGN hrgn1,HRGN hrgn2);
  WINGDIAPI Inteiro WINAPI Escape(HDC hdc,Inteiro iEscape,Inteiro cjIn,LPCSTR pvIn,LPVOID pvOut);
  WINGDIAPI Inteiro WINAPI ExtEscape(HDC hdc,Inteiro iEscape,Inteiro cjInput,LPCSTR lpInData,Inteiro cjOutput,LPSTR lpOutData);
  WINGDIAPI Inteiro WINAPI ExcludeClipRect(HDC hdc,Inteiro left,Inteiro top,Inteiro right,Inteiro bottom);
  WINGDIAPI HRGN WINAPI ExtCreateRegion(CONST XFORM *lpx,DWORD nCount,CONST RGNDATA *lpData);
  WINGDIAPI WINBOOL WINAPI ExtFloodFill(HDC hdc,Inteiro x,Inteiro y,COLORREF color,UINT type);
  WINGDIAPI WINBOOL WINAPI FillRgn(HDC hdc,HRGN hrgn,HBRUSH hbr);
  WINGDIAPI WINBOOL WINAPI FloodFill(HDC hdc,Inteiro x,Inteiro y,COLORREF color);
  WINGDIAPI WINBOOL WINAPI FrameRgn(HDC hdc,HRGN hrgn,HBRUSH hbr,Inteiro w,Inteiro h);
  WINGDIAPI Inteiro WINAPI GetROP2(HDC hdc);
  WINGDIAPI WINBOOL WINAPI GetAspectRatioFilterEx(HDC hdc,LPSIZE lpsize);
  WINGDIAPI COLORREF WINAPI GetBkColor(HDC hdc);
  WINGDIAPI COLORREF WINAPI GetDCBrushColor(HDC hdc);
  WINGDIAPI COLORREF WINAPI GetDCPenColor(HDC hdc);
  WINGDIAPI Inteiro WINAPI GetBkMode(HDC hdc);
  WINGDIAPI LONG WINAPI GetBitmapBits(HBITMAP hbit,LONG cb,LPVOID lpvBits);
  WINGDIAPI WINBOOL WINAPI GetBitmapDimensionEx(HBITMAP hbit,LPSIZE lpsize);
  WINGDIAPI UINT WINAPI GetBoundsRect(HDC hdc,LPRECT lprect,UINT flags);
  WINGDIAPI WINBOOL WINAPI GetBrushOrgEx(HDC hdc,LPPOINT lppt);
  WINGDIAPI WINBOOL WINAPI GetCharWidthA(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
  WINGDIAPI WINBOOL WINAPI GetCharWidthW(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
  WINGDIAPI WINBOOL WINAPI GetCharWidth32A(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
  WINGDIAPI WINBOOL WINAPI GetCharWidth32W(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
  WINGDIAPI WINBOOL WINAPI GetCharWidthFloatA(HDC hdc,UINT iFirst,UINT iLast,PFLOAT lpBuffer);
  WINGDIAPI WINBOOL WINAPI GetCharWidthFloatW(HDC hdc,UINT iFirst,UINT iLast,PFLOAT lpBuffer);
  WINGDIAPI WINBOOL WINAPI GetCharABCWidthsA(HDC hdc,UINT wFirst,UINT wLast,LPABC lpABC);
  WINGDIAPI WINBOOL WINAPI GetCharABCWidthsW(HDC hdc,UINT wFirst,UINT wLast,LPABC lpABC);
  WINGDIAPI WINBOOL WINAPI GetCharABCWidthsFloatA(HDC hdc,UINT iFirst,UINT iLast,LPABCFLOAT lpABC);
  WINGDIAPI WINBOOL WINAPI GetCharABCWidthsFloatW(HDC hdc,UINT iFirst,UINT iLast,LPABCFLOAT lpABC);
  WINGDIAPI Inteiro WINAPI GetClipBox(HDC hdc,LPRECT lprect);
  WINGDIAPI Inteiro WINAPI GetClipRgn(HDC hdc,HRGN hrgn);
  WINGDIAPI Inteiro WINAPI GetMetaRgn(HDC hdc,HRGN hrgn);
  WINGDIAPI HGDIOBJ WINAPI GetCurrentObject(HDC hdc,UINT type);
  WINGDIAPI WINBOOL WINAPI GetCurrentPositionEx(HDC hdc,LPPOINT lppt);
  WINGDIAPI Inteiro WINAPI GetDeviceCaps(HDC hdc,Inteiro index);
  WINGDIAPI Inteiro WINAPI GetDIBits(HDC hdc,HBITMAP hbm,UINT start,UINT cLines,LPVOID lpvBits,LPBITMAPINFO lpbmi,UINT usage);
  WINGDIAPI DWORD WINAPI GetFontData (HDC hdc,DWORD dwTable,DWORD dwOffset,PVOID pvBuffer,DWORD cjBuffer);
  WINGDIAPI DWORD WINAPI GetGlyphOutlineA(HDC hdc,UINT uChar,UINT fuFormat,LPGLYPHMETRICS lpgm,DWORD cjBuffer,LPVOID pvBuffer,CONST MAT2 *lpmat2);
  WINGDIAPI DWORD WINAPI GetGlyphOutlineW(HDC hdc,UINT uChar,UINT fuFormat,LPGLYPHMETRICS lpgm,DWORD cjBuffer,LPVOID pvBuffer,CONST MAT2 *lpmat2);
  WINGDIAPI Inteiro WINAPI GetGraphicsMode(HDC hdc);
  WINGDIAPI Inteiro WINAPI GetMapMode(HDC hdc);
  WINGDIAPI UINT WINAPI GetMetaFileBitsEx(HMETAFILE hMF,UINT cbBuffer,LPVOID lpData);
  WINGDIAPI HMETAFILE WINAPI GetMetaFileA(LPCSTR lpName);
  WINGDIAPI HMETAFILE WINAPI GetMetaFileW(LPCWSTR lpName);
  WINGDIAPI COLORREF WINAPI GetNearestColor(HDC hdc,COLORREF color);
  WINGDIAPI UINT WINAPI GetNearestPaletteIndex(HPALETTE h,COLORREF color);
  WINGDIAPI DWORD WINAPI GetObjectType(HGDIOBJ h);

#SenãoDefinido NOTEXTMETRIC
#SeDefinido UNICODE
#Defina GetOutlineTextMetrics GetOutlineTextMetricsW
#Senão
#Defina GetOutlineTextMetrics GetOutlineTextMetricsA
#FimSe

  WINGDIAPI UINT WINAPI GetOutlineTextMetricsA(HDC hdc,UINT cjCopy,LPOUTLINETEXTMETRICA potm);
  WINGDIAPI UINT WINAPI GetOutlineTextMetricsW(HDC hdc,UINT cjCopy,LPOUTLINETEXTMETRICW potm);
#FimSe

#SeDefinido UNICODE
#Defina GetTextExtentPoint GetTextExtentPointW
#Defina GetTextExtentPoint32 GetTextExtentPoint32W
#Defina GetTextExtentExPoint GetTextExtentExPointW
#Defina GetCharacterPlacement GetCharacterPlacementW
#Senão
#Defina GetTextExtentPoint GetTextExtentPointA
#Defina GetTextExtentPoint32 GetTextExtentPoint32A
#Defina GetTextExtentExPoint GetTextExtentExPointA
#Defina GetCharacterPlacement GetCharacterPlacementA
#FimSe

  WINGDIAPI UINT WINAPI GetPaletteEntries(HPALETTE hpal,UINT iStart,UINT cEntries,LPPALETTEENTRY pPalEntries);
  WINGDIAPI COLORREF WINAPI GetPixel(HDC hdc,Inteiro x,Inteiro y);
  WINGDIAPI Inteiro WINAPI GetPixelFormat(HDC hdc);
  WINGDIAPI Inteiro WINAPI GetPolyFillMode(HDC hdc);
  WINGDIAPI WINBOOL WINAPI GetRasterizerCaps(LPRASTERIZER_STATUS lpraststat,UINT cjBytes);
  WINGDIAPI Inteiro WINAPI GetRandomRgn (HDC hdc,HRGN hrgn,INT i);
  WINGDIAPI DWORD WINAPI GetRegionData(HRGN hrgn,DWORD nCount,LPRGNDATA lpRgnData);
  WINGDIAPI Inteiro WINAPI GetRgnBox(HRGN hrgn,LPRECT lprc);
  WINGDIAPI HGDIOBJ WINAPI GetStockObject(Inteiro i);
  WINGDIAPI Inteiro WINAPI GetStretchBltMode(HDC hdc);
  WINGDIAPI UINT WINAPI GetSystemPaletteEntries(HDC hdc,UINT iStart,UINT cEntries,LPPALETTEENTRY pPalEntries);
  WINGDIAPI UINT WINAPI GetSystemPaletteUse(HDC hdc);
  WINGDIAPI Inteiro WINAPI GetTextCharacterExtra(HDC hdc);
  WINGDIAPI UINT WINAPI GetTextAlign(HDC hdc);
  WINGDIAPI COLORREF WINAPI GetTextColor(HDC hdc);
  WINGDIAPI WINBOOL WINAPI GetTextExtentPointA(HDC hdc,LPCSTR lpString,Inteiro c,LPSIZE lpsz);
  WINGDIAPI WINBOOL WINAPI GetTextExtentPointW(HDC hdc,LPCWSTR lpString,Inteiro c,LPSIZE lpsz);
  WINGDIAPI WINBOOL WINAPI GetTextExtentPoint32A(HDC hdc,LPCSTR lpString,Inteiro c,LPSIZE psizl);
  WINGDIAPI WINBOOL WINAPI GetTextExtentPoint32W(HDC hdc,LPCWSTR lpString,Inteiro c,LPSIZE psizl);
  WINGDIAPI WINBOOL WINAPI GetTextExtentExPointA(HDC hdc,LPCSTR lpszString,Inteiro cchString,Inteiro nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
  WINGDIAPI WINBOOL WINAPI GetTextExtentExPointW(HDC hdc,LPCWSTR lpszString,Inteiro cchString,Inteiro nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
  WINGDIAPI Inteiro WINAPI GetTextCharset(HDC hdc);
  WINGDIAPI Inteiro WINAPI GetTextCharsetInfo(HDC hdc,LPFONTSIGNATURE lpSig,DWORD dwFlags);
  WINGDIAPI WINBOOL WINAPI TranslateCharsetInfo(DWORD *lpSrc,LPCHARSETINFO lpCs,DWORD dwFlags);
  WINGDIAPI DWORD WINAPI GetFontLanguageInfo(HDC hdc);
  WINGDIAPI DWORD WINAPI GetCharacterPlacementA(HDC hdc,LPCSTR lpString,Inteiro nCount,Inteiro nMexExtent,LPGCP_RESULTSA lpResults,DWORD dwFlags);
  WINGDIAPI DWORD WINAPI GetCharacterPlacementW(HDC hdc,LPCWSTR lpString,Inteiro nCount,Inteiro nMexExtent,LPGCP_RESULTSW lpResults,DWORD dwFlags);

  Tipo Estrutura tagWCRANGE {
    WCHAR wcLow;
    USHORT cGlyphs;
  } WCRANGE,*PWCRANGE,*LPWCRANGE;

  Tipo Estrutura tagGLYPHSET {
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
  } GLYPHSET,*PGLYPHSET,*LPGLYPHSET;

#Defina GS_8BIT_INDICES 0x00000001

#Defina GGI_MARK_NONEXISTING_GLYPHS 0X0001

#SeDefinido UNICODE
#Defina GetGlyphIndices GetGlyphIndicesW
#Senão
#Defina GetGlyphIndices GetGlyphIndicesA
#FimSe

  WINGDIAPI DWORD WINAPI GetFontUnicodeRanges(HDC hdc,LPGLYPHSET lpgs);
  WINGDIAPI DWORD WINAPI GetGlyphIndicesA(HDC hdc,LPCSTR lpstr,Inteiro c,LPWORD pgi,DWORD fl);
  WINGDIAPI DWORD WINAPI GetGlyphIndicesW(HDC hdc,LPCWSTR lpstr,Inteiro c,LPWORD pgi,DWORD fl);
  WINGDIAPI WINBOOL WINAPI GetTextExtentPointI(HDC hdc,LPWORD pgiIn,Inteiro cgi,LPSIZE psize);
  WINGDIAPI WINBOOL WINAPI GetTextExtentExPointI (HDC hdc,LPWORD lpwszString,Inteiro cwchString,Inteiro nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
  WINGDIAPI WINBOOL WINAPI GetCharWidthI(HDC hdc,UINT giFirst,UINT cgi,LPWORD pgi,LPINT piWidths);
  WINGDIAPI WINBOOL WINAPI GetCharABCWidthsI(HDC hdc,UINT giFirst,UINT cgi,LPWORD pgi,LPABC pabc);

#Defina STAMP_DESIGNVECTOR (0x8000000 + 'd' + ('v' << 8))
#Defina STAMP_AXESLIST (0x8000000 + 'a' + ('l' << 8))
#Defina MM_MAX_NUMAXES 16

  Tipo Estrutura tagDESIGNVECTOR {
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[MM_MAX_NUMAXES];
  } DESIGNVECTOR,*PDESIGNVECTOR,*LPDESIGNVECTOR;

#SeDefinido UNICODE
#Defina AddFontResourceEx AddFontResourceExW
#Defina RemoveFontResourceEx RemoveFontResourceExW
#Senão
#Defina AddFontResourceEx AddFontResourceExA
#Defina RemoveFontResourceEx RemoveFontResourceExA
#FimSe

  WINGDIAPI Inteiro WINAPI AddFontResourceExA(LPCSTR name,DWORD fl,PVOID res);
  WINGDIAPI Inteiro WINAPI AddFontResourceExW(LPCWSTR name,DWORD fl,PVOID res);
  WINGDIAPI WINBOOL WINAPI RemoveFontResourceExA(LPCSTR name,DWORD fl,PVOID pdv);
  WINGDIAPI WINBOOL WINAPI RemoveFontResourceExW(LPCWSTR name,DWORD fl,PVOID pdv);
  WINGDIAPI HANDLE WINAPI AddFontMemResourceEx(PVOID pFileView,DWORD cjSize,PVOID pvResrved,DWORD *pNumFonts);
  WINGDIAPI WINBOOL WINAPI RemoveFontMemResourceEx(HANDLE h);

#Defina FR_PRIVATE 0x10
#Defina FR_NOT_ENUM 0x20

#Defina MM_MAX_AXES_NAMELEN 16

  Tipo Estrutura tagAXISINFOA {
    LONG axMinValue;
    LONG axMaxValue;
    BYTE axAxisName[MM_MAX_AXES_NAMELEN];
  } AXISINFOA,*PAXISINFOA,*LPAXISINFOA;

  Tipo Estrutura tagAXISINFOW {
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR axAxisName[MM_MAX_AXES_NAMELEN];
  } AXISINFOW,*PAXISINFOW,*LPAXISINFOW;
#SeDefinido UNICODE
  Tipo AXISINFOW AXISINFO;
  Tipo PAXISINFOW PAXISINFO;
  Tipo LPAXISINFOW LPAXISINFO;
#Senão
  Tipo AXISINFOA AXISINFO;
  Tipo PAXISINFOA PAXISINFO;
  Tipo LPAXISINFOA LPAXISINFO;
#FimSe

  Tipo Estrutura tagAXESLISTA {
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA axlAxisInfo[MM_MAX_NUMAXES];
  } AXESLISTA,*PAXESLISTA,*LPAXESLISTA;

  Tipo Estrutura tagAXESLISTW {
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW axlAxisInfo[MM_MAX_NUMAXES];
  } AXESLISTW,*PAXESLISTW,*LPAXESLISTW;
#SeDefinido UNICODE
  Tipo AXESLISTW AXESLIST;
  Tipo PAXESLISTW PAXESLIST;
  Tipo LPAXESLISTW LPAXESLIST;
#Senão
  Tipo AXESLISTA AXESLIST;
  Tipo PAXESLISTA PAXESLIST;
  Tipo LPAXESLISTA LPAXESLIST;
#FimSe

  Tipo Estrutura tagENUMLOGFONTEXDVA {
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
  } ENUMLOGFONTEXDVA,*PENUMLOGFONTEXDVA,*LPENUMLOGFONTEXDVA;

  Tipo Estrutura tagENUMLOGFONTEXDVW {
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
  } ENUMLOGFONTEXDVW,*PENUMLOGFONTEXDVW,*LPENUMLOGFONTEXDVW;
#SeDefinido UNICODE
  Tipo ENUMLOGFONTEXDVW ENUMLOGFONTEXDV;
  Tipo PENUMLOGFONTEXDVW PENUMLOGFONTEXDV;
  Tipo LPENUMLOGFONTEXDVW LPENUMLOGFONTEXDV;
#Senão
  Tipo ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
  Tipo PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
  Tipo LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;
#FimSe

#SeDefinido UNICODE
#Defina CreateFontIndirectEx CreateFontIndirectExW
#Senão
#Defina CreateFontIndirectEx CreateFontIndirectExA
#FimSe

  WINGDIAPI HFONT WINAPI CreateFontIndirectExA(CONST ENUMLOGFONTEXDVA *);
  WINGDIAPI HFONT WINAPI CreateFontIndirectExW(CONST ENUMLOGFONTEXDVW *);

#SenãoDefinido NOTEXTMETRIC
  Tipo Estrutura tagENUMTEXTMETRICA {
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
  } ENUMTEXTMETRICA,*PENUMTEXTMETRICA,*LPENUMTEXTMETRICA;
  Tipo Estrutura tagENUMTEXTMETRICW
  {
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
  } ENUMTEXTMETRICW,*PENUMTEXTMETRICW,*LPENUMTEXTMETRICW;
#SeDefinido UNICODE
  Tipo ENUMTEXTMETRICW ENUMTEXTMETRIC;
  Tipo PENUMTEXTMETRICW PENUMTEXTMETRIC;
  Tipo LPENUMTEXTMETRICW LPENUMTEXTMETRIC;
#Senão
  Tipo ENUMTEXTMETRICA ENUMTEXTMETRIC;
  Tipo PENUMTEXTMETRICA PENUMTEXTMETRIC;
  Tipo LPENUMTEXTMETRICA LPENUMTEXTMETRIC;
#FimSe
#FimSe

#SeDefinido UNICODE
#Defina ResetDC ResetDCW
#Defina RemoveFontResource RemoveFontResourceW
#Senão
#Defina ResetDC ResetDCA
#Defina RemoveFontResource RemoveFontResourceA
#FimSe

  WINGDIAPI WINBOOL WINAPI GetViewportExtEx(HDC hdc,LPSIZE lpsize);
  WINGDIAPI WINBOOL WINAPI GetViewportOrgEx(HDC hdc,LPPOINT lppoint);
  WINGDIAPI WINBOOL WINAPI GetWindowExtEx(HDC hdc,LPSIZE lpsize);
  WINGDIAPI WINBOOL WINAPI GetWindowOrgEx(HDC hdc,LPPOINT lppoint);
  WINGDIAPI Inteiro WINAPI IntersectClipRect(HDC hdc,Inteiro left,Inteiro top,Inteiro right,Inteiro bottom);
  WINGDIAPI WINBOOL WINAPI InvertRgn(HDC hdc,HRGN hrgn);
  WINGDIAPI WINBOOL WINAPI LineDDA(Inteiro xStart,Inteiro yStart,Inteiro xEnd,Inteiro yEnd,LINEDDAPROC lpProc,LPARAM data);
  WINGDIAPI WINBOOL WINAPI LineTo(HDC hdc,Inteiro x,Inteiro y);
  WINGDIAPI WINBOOL WINAPI MaskBlt(HDC hdcDest,Inteiro xDest,Inteiro yDest,Inteiro width,Inteiro height,HDC hdcSrc,Inteiro xSrc,Inteiro ySrc,HBITMAP hbmMask,Inteiro xMask,Inteiro yMask,DWORD rop);
  WINGDIAPI WINBOOL WINAPI PlgBlt(HDC hdcDest,CONST POINT *lpPoint,HDC hdcSrc,Inteiro xSrc,Inteiro ySrc,Inteiro width,Inteiro height,HBITMAP hbmMask,Inteiro xMask,Inteiro yMask);
  WINGDIAPI Inteiro WINAPI OffsetClipRgn(HDC hdc,Inteiro x,Inteiro y);
  WINGDIAPI Inteiro WINAPI OffsetRgn(HRGN hrgn,Inteiro x,Inteiro y);
  WINGDIAPI WINBOOL WINAPI PatBlt(HDC hdc,Inteiro x,Inteiro y,Inteiro w,Inteiro h,DWORD rop);
  WINGDIAPI WINBOOL WINAPI Pie(HDC hdc,Inteiro left,Inteiro top,Inteiro right,Inteiro bottom,Inteiro xr1,Inteiro yr1,Inteiro xr2,Inteiro yr2);
  WINGDIAPI WINBOOL WINAPI PlayMetaFile(HDC hdc,HMETAFILE hmf);
  WINGDIAPI WINBOOL WINAPI PaintRgn(HDC hdc,HRGN hrgn);
  WINGDIAPI WINBOOL WINAPI PolyPolygon(HDC hdc,CONST POINT *apt,CONST INT *asz,Inteiro csz);
  WINGDIAPI WINBOOL WINAPI PtInRegion(HRGN hrgn,Inteiro x,Inteiro y);
  WINGDIAPI WINBOOL WINAPI PtVisible(HDC hdc,Inteiro x,Inteiro y);
  WINGDIAPI WINBOOL WINAPI RectInRegion(HRGN hrgn,CONST RECT *lprect);
  WINGDIAPI WINBOOL WINAPI RectVisible(HDC hdc,CONST RECT *lprect);
  WINGDIAPI WINBOOL WINAPI Rectangle(HDC hdc,Inteiro left,Inteiro top,Inteiro right,Inteiro bottom);
  WINGDIAPI WINBOOL WINAPI RestoreDC(HDC hdc,Inteiro nSavedDC);
  WINGDIAPI HDC WINAPI ResetDCA(HDC hdc,CONST DEVMODEA *lpdm);
  WINGDIAPI HDC WINAPI ResetDCW(HDC hdc,CONST DEVMODEW *lpdm);
  WINGDIAPI UINT WINAPI RealizePalette(HDC hdc);
  WINGDIAPI WINBOOL WINAPI RemoveFontResourceA(LPCSTR lpFileName);
  WINGDIAPI WINBOOL WINAPI RemoveFontResourceW(LPCWSTR lpFileName);
  WINGDIAPI WINBOOL WINAPI RoundRect(HDC hdc,Inteiro left,Inteiro top,Inteiro right,Inteiro bottom,Inteiro width,Inteiro height);
  WINGDIAPI WINBOOL WINAPI ResizePalette(HPALETTE hpal,UINT n);
  WINGDIAPI Inteiro WINAPI SaveDC(HDC hdc);
  WINGDIAPI Inteiro WINAPI SelectClipRgn(HDC hdc,HRGN hrgn);
  WINGDIAPI Inteiro WINAPI ExtSelectClipRgn(HDC hdc,HRGN hrgn,Inteiro mode);
  WINGDIAPI Inteiro WINAPI SetMetaRgn(HDC hdc);
  WINGDIAPI HGDIOBJ WINAPI SelectObject(HDC hdc,HGDIOBJ h);
  WINGDIAPI HPALETTE WINAPI SelectPalette(HDC hdc,HPALETTE hPal,WINBOOL bForceBkgd);
  WINGDIAPI COLORREF WINAPI SetBkColor(HDC hdc,COLORREF color);
  WINGDIAPI COLORREF WINAPI SetDCBrushColor(HDC hdc,COLORREF color);
  WINGDIAPI COLORREF WINAPI SetDCPenColor(HDC hdc,COLORREF color);
  WINGDIAPI Inteiro WINAPI SetBkMode(HDC hdc,Inteiro mode);
  WINGDIAPI LONG WINAPI SetBitmapBits(HBITMAP hbm,DWORD cb,CONST VOID *pvBits);
  WINGDIAPI UINT WINAPI SetBoundsRect(HDC hdc,CONST RECT *lprect,UINT flags);
  WINGDIAPI Inteiro WINAPI SetDIBits(HDC hdc,HBITMAP hbm,UINT start,UINT cLines,CONST VOID *lpBits,CONST BITMAPINFO *lpbmi,UINT ColorUse);
  WINGDIAPI Inteiro WINAPI SetDIBitsToDevice(HDC hdc,Inteiro xDest,Inteiro yDest,DWORD w,DWORD h,Inteiro xSrc,Inteiro ySrc,UINT StartScan,UINT cLines,CONST VOID *lpvBits,CONST BITMAPINFO *lpbmi,UINT ColorUse);
  WINGDIAPI DWORD WINAPI SetMapperFlags(HDC hdc,DWORD flags);
  WINGDIAPI Inteiro WINAPI SetGraphicsMode(HDC hdc,Inteiro iMode);
  WINGDIAPI Inteiro WINAPI SetMapMode(HDC hdc,Inteiro iMode);
  WINGDIAPI DWORD WINAPI SetLayout(HDC hdc,DWORD l);
  WINGDIAPI DWORD WINAPI GetLayout(HDC hdc);
  WINGDIAPI HMETAFILE WINAPI SetMetaFileBitsEx(UINT cbBuffer,CONST BYTE *lpData);
  WINGDIAPI UINT WINAPI SetPaletteEntries(HPALETTE hpal,UINT iStart,UINT cEntries,CONST PALETTEENTRY *pPalEntries);
  WINGDIAPI COLORREF WINAPI SetPixel(HDC hdc,Inteiro x,Inteiro y,COLORREF color);
  WINGDIAPI WINBOOL WINAPI SetPixelV(HDC hdc,Inteiro x,Inteiro y,COLORREF color);
  WINGDIAPI WINBOOL WINAPI SetPixelFormat(HDC hdc,Inteiro format,CONST PIXELFORMATDESCRIPTOR *ppfd);
  WINGDIAPI Inteiro WINAPI SetPolyFillMode(HDC hdc,Inteiro mode);
  WINGDIAPI WINBOOL WINAPI StretchBlt(HDC hdcDest,Inteiro xDest,Inteiro yDest,Inteiro wDest,Inteiro hDest,HDC hdcSrc,Inteiro xSrc,Inteiro ySrc,Inteiro wSrc,Inteiro hSrc,DWORD rop);
  WINGDIAPI WINBOOL WINAPI SetRectRgn(HRGN hrgn,Inteiro left,Inteiro top,Inteiro right,Inteiro bottom);
  WINGDIAPI Inteiro WINAPI StretchDIBits(HDC hdc,Inteiro xDest,Inteiro yDest,Inteiro DestWidth,Inteiro DestHeight,Inteiro xSrc,Inteiro ySrc,Inteiro SrcWidth,Inteiro SrcHeight,CONST VOID *lpBits,CONST BITMAPINFO *lpbmi,UINT iUsage,DWORD rop);
  WINGDIAPI Inteiro WINAPI SetROP2(HDC hdc,Inteiro rop2);
  WINGDIAPI Inteiro WINAPI SetStretchBltMode(HDC hdc,Inteiro mode);
  WINGDIAPI UINT WINAPI SetSystemPaletteUse(HDC hdc,UINT use);
  WINGDIAPI Inteiro WINAPI SetTextCharacterExtra(HDC hdc,Inteiro extra);
  WINGDIAPI COLORREF WINAPI SetTextColor(HDC hdc,COLORREF color);
  WINGDIAPI UINT WINAPI SetTextAlign(HDC hdc,UINT align);
  WINGDIAPI WINBOOL WINAPI SetTextJustification(HDC hdc,Inteiro extra,Inteiro count);
  WINGDIAPI WINBOOL WINAPI UpdateColors(HDC hdc);

  Tipo USHORT COLOR16;

  Tipo Estrutura _TRIVERTEX {
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
  } TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;

  Tipo Estrutura _GRADIENT_TRIANGLE {
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
  } GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

  Tipo Estrutura _GRADIENT_RECT {
    ULONG UpperLeft;
    ULONG LowerRight;
  } GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;

  Tipo Estrutura _BLENDFUNCTION {
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
  } BLENDFUNCTION,*PBLENDFUNCTION;

#Defina AC_SRC_OVER 0x00
#Defina AC_SRC_ALPHA 0x01

  WINGDIAPI WINBOOL WINAPI AlphaBlend(HDC hdcDest,Inteiro xoriginDest,Inteiro yoriginDest,Inteiro wDest,Inteiro hDest,HDC hdcSrc,Inteiro xoriginSrc,Inteiro yoriginSrc,Inteiro wSrc,Inteiro hSrc,BLENDFUNCTION ftn);
  WINGDIAPI WINBOOL WINAPI TransparentBlt(HDC hdcDest,Inteiro xoriginDest,Inteiro yoriginDest,Inteiro wDest,Inteiro hDest,HDC hdcSrc,Inteiro xoriginSrc,Inteiro yoriginSrc,Inteiro wSrc,Inteiro hSrc,UINT crTransparent);

#Defina GRADIENT_FILL_RECT_H 0x00000000
#Defina GRADIENT_FILL_RECT_V 0x00000001
#Defina GRADIENT_FILL_TRIANGLE 0x00000002
#Defina GRADIENT_FILL_OP_FLAG 0x000000ff

  WINGDIAPI WINBOOL WINAPI GradientFill(HDC hdc,PTRIVERTEX pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,ULONG ulMode);

#SenãoDefinido NOMETAFILE

#SeDefinido UNICODE
#Defina CopyEnhMetaFile CopyEnhMetaFileW
#Defina CreateEnhMetaFile CreateEnhMetaFileW
#Defina GetEnhMetaFile GetEnhMetaFileW
#Defina GetEnhMetaFileDescription GetEnhMetaFileDescriptionW
#Senão
#Defina CopyEnhMetaFile CopyEnhMetaFileA
#Defina CreateEnhMetaFile CreateEnhMetaFileA
#Defina GetEnhMetaFile GetEnhMetaFileA
#Defina GetEnhMetaFileDescription GetEnhMetaFileDescriptionA
#FimSe

  WINGDIAPI WINBOOL WINAPI PlayMetaFileRecord(HDC hdc,LPHANDLETABLE lpHandleTable,LPMETARECORD lpMR,UINT noObjs);

  Tipo Inteiro (CALLBACK *MFENUMPROC)(HDC hdc,HANDLETABLE *lpht,METARECORD *lpMR,Inteiro nObj,LPARAM param);

  WINGDIAPI WINBOOL WINAPI EnumMetaFile(HDC hdc,HMETAFILE hmf,MFENUMPROC proc,LPARAM param);

  Tipo Inteiro (CALLBACK *ENHMFENUMPROC)(HDC hdc,HANDLETABLE *lpht,CONST ENHMETARECORD *lpmr,Inteiro hHandles,LPARAM data);

  WINGDIAPI HENHMETAFILE WINAPI CloseEnhMetaFile(HDC hdc);
  WINGDIAPI HENHMETAFILE WINAPI CopyEnhMetaFileA(HENHMETAFILE hEnh,LPCSTR lpFileName);
  WINGDIAPI HENHMETAFILE WINAPI CopyEnhMetaFileW(HENHMETAFILE hEnh,LPCWSTR lpFileName);
  WINGDIAPI HDC WINAPI CreateEnhMetaFileA(HDC hdc,LPCSTR lpFilename,CONST RECT *lprc,LPCSTR lpDesc);
  WINGDIAPI HDC WINAPI CreateEnhMetaFileW(HDC hdc,LPCWSTR lpFilename,CONST RECT *lprc,LPCWSTR lpDesc);
  WINGDIAPI WINBOOL WINAPI DeleteEnhMetaFile(HENHMETAFILE hmf);
  WINGDIAPI WINBOOL WINAPI EnumEnhMetaFile(HDC hdc,HENHMETAFILE hmf,ENHMFENUMPROC proc,LPVOID param,CONST RECT *lpRect);
  WINGDIAPI HENHMETAFILE WINAPI GetEnhMetaFileA(LPCSTR lpName);
  WINGDIAPI HENHMETAFILE WINAPI GetEnhMetaFileW(LPCWSTR lpName);
  WINGDIAPI UINT WINAPI GetEnhMetaFileBits(HENHMETAFILE hEMF,UINT nSize,LPBYTE lpData);
  WINGDIAPI UINT WINAPI GetEnhMetaFileDescriptionA(HENHMETAFILE hemf,UINT cchBuffer,LPSTR lpDescription);
  WINGDIAPI UINT WINAPI GetEnhMetaFileDescriptionW(HENHMETAFILE hemf,UINT cchBuffer,LPWSTR lpDescription);
  WINGDIAPI UINT WINAPI GetEnhMetaFileHeader(HENHMETAFILE hemf,UINT nSize,LPENHMETAHEADER lpEnhMetaHeader);
  WINGDIAPI UINT WINAPI GetEnhMetaFilePaletteEntries(HENHMETAFILE hemf,UINT nNumEntries,LPPALETTEENTRY lpPaletteEntries);
  WINGDIAPI UINT WINAPI GetEnhMetaFilePixelFormat(HENHMETAFILE hemf,UINT cbBuffer,PIXELFORMATDESCRIPTOR *ppfd);
  WINGDIAPI UINT WINAPI GetWinMetaFileBits(HENHMETAFILE hemf,UINT cbData16,LPBYTE pData16,INT iMapMode,HDC hdcRef);
  WINGDIAPI WINBOOL WINAPI PlayEnhMetaFile(HDC hdc,HENHMETAFILE hmf,CONST RECT *lprect);
  WINGDIAPI WINBOOL WINAPI PlayEnhMetaFileRecord(HDC hdc,LPHANDLETABLE pht,CONST ENHMETARECORD *pmr,UINT cht);
  WINGDIAPI HENHMETAFILE WINAPI SetEnhMetaFileBits(UINT nSize,CONST BYTE *pb);
  WINGDIAPI HENHMETAFILE WINAPI SetWinMetaFileBits(UINT nSize,CONST BYTE *lpMeta16Data,HDC hdcRef,CONST METAFILEPICT *lpMFP);
  WINGDIAPI WINBOOL WINAPI GdiComment(HDC hdc,UINT nSize,CONST BYTE *lpData);
#FimSe

#SenãoDefinido NOTEXTMETRIC
#SeDefinido UNICODE
#Defina GetTextMetrics GetTextMetricsW
#Senão
#Defina GetTextMetrics GetTextMetricsA
#FimSe

  WINGDIAPI WINBOOL WINAPI GetTextMetricsA(HDC hdc,LPTEXTMETRICA lptm);
  WINGDIAPI WINBOOL WINAPI GetTextMetricsW(HDC hdc,LPTEXTMETRICW lptm);
#FimSe

  Tipo Estrutura tagDIBSECTION {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
  } DIBSECTION,*LPDIBSECTION,*PDIBSECTION;

  WINGDIAPI WINBOOL WINAPI AngleArc(HDC hdc,Inteiro x,Inteiro y,DWORD r,FLOAT StartAngle,FLOAT SweepAngle);
  WINGDIAPI WINBOOL WINAPI PolyPolyline(HDC hdc,CONST POINT *apt,CONST DWORD *asz,DWORD csz);
  WINGDIAPI WINBOOL WINAPI GetWorldTransform(HDC hdc,LPXFORM lpxf);
  WINGDIAPI WINBOOL WINAPI SetWorldTransform(HDC hdc,CONST XFORM *lpxf);
  WINGDIAPI WINBOOL WINAPI ModifyWorldTransform(HDC hdc,CONST XFORM *lpxf,DWORD mode);
  WINGDIAPI WINBOOL WINAPI CombineTransform(LPXFORM lpxfOut,CONST XFORM *lpxf1,CONST XFORM *lpxf2);
  WINGDIAPI HBITMAP WINAPI CreateDIBSection(HDC hdc,CONST BITMAPINFO *lpbmi,UINT usage,VOID **ppvBits,HANDLE hSection,DWORD offset);
  WINGDIAPI UINT WINAPI GetDIBColorTable(HDC hdc,UINT iStart,UINT cEntries,RGBQUAD *prgbq);
  WINGDIAPI UINT WINAPI SetDIBColorTable(HDC hdc,UINT iStart,UINT cEntries,CONST RGBQUAD *prgbq);

#Defina CA_NEGATIVE 0x0001
#Defina CA_LOG_FILTER 0x0002

#Defina ILLUMINANT_DEVICE_DEFAULT 0
#Defina ILLUMINANT_A 1
#Defina ILLUMINANT_B 2
#Defina ILLUMINANT_C 3
#Defina ILLUMINANT_D50 4
#Defina ILLUMINANT_D55 5
#Defina ILLUMINANT_D65 6
#Defina ILLUMINANT_D75 7
#Defina ILLUMINANT_F2 8
#Defina ILLUMINANT_MAX_INDEX ILLUMINANT_F2

#Defina ILLUMINANT_TUNGSTEN ILLUMINANT_A
#Defina ILLUMINANT_DAYLIGHT ILLUMINANT_C
#Defina ILLUMINANT_FLUORESCENT ILLUMINANT_F2
#Defina ILLUMINANT_NTSC ILLUMINANT_C

#Defina RGB_GAMMA_MIN (WORD)02500
#Defina RGB_GAMMA_MAX (WORD)65000

#Defina REFERENCE_WHITE_MIN (WORD)6000
#Defina REFERENCE_WHITE_MAX (WORD)10000
#Defina REFERENCE_BLACK_MIN (WORD)0
#Defina REFERENCE_BLACK_MAX (WORD)4000

#Defina COLOR_ADJ_MIN (SHORT)-100
#Defina COLOR_ADJ_MAX (SHORT)100

  Tipo Estrutura tagCOLORADJUSTMENT {
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
  } COLORADJUSTMENT,*PCOLORADJUSTMENT,*LPCOLORADJUSTMENT;

  WINGDIAPI WINBOOL WINAPI SetColorAdjustment(HDC hdc,CONST COLORADJUSTMENT *lpca);
  WINGDIAPI WINBOOL WINAPI GetColorAdjustment(HDC hdc,LPCOLORADJUSTMENT lpca);
  WINGDIAPI HPALETTE WINAPI CreateHalftonePalette(HDC hdc);

  Tipo WINBOOL (CALLBACK *ABORTPROC)(HDC,Inteiro);

  Tipo Estrutura _DOCINFOA {
    Inteiro cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;
    LPCSTR lpszDatatype;
    DWORD fwType;
  } DOCINFOA,*LPDOCINFOA;

  Tipo Estrutura _DOCINFOW {
    Inteiro cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;
    LPCWSTR lpszDatatype;
    DWORD fwType;
  } DOCINFOW,*LPDOCINFOW;

#SeDefinido UNICODE
  Tipo DOCINFOW DOCINFO;
  Tipo LPDOCINFOW LPDOCINFO;
#Senão
  Tipo DOCINFOA DOCINFO;
  Tipo LPDOCINFOA LPDOCINFO;
#FimSe

#Defina DI_APPBANDING 0x00000001
#Defina DI_ROPS_READ_DESTINATION 0x00000002

#SeDefinido UNICODE
#Defina StartDoc StartDocW
#Defina GetObject GetObjectW
#Defina TextOut TextOutW
#Defina ExtTextOut ExtTextOutW
#Defina PolyTextOut PolyTextOutW
#Defina GetTextFace GetTextFaceW
#Senão
#Defina StartDoc StartDocA
#Defina GetObject GetObjectA
#Defina TextOut TextOutA
#Defina ExtTextOut ExtTextOutA
#Defina PolyTextOut PolyTextOutA
#Defina GetTextFace GetTextFaceA
#FimSe

  WINGDIAPI Inteiro WINAPI StartDocA(HDC hdc,CONST DOCINFOA *lpdi);
  WINGDIAPI Inteiro WINAPI StartDocW(HDC hdc,CONST DOCINFOW *lpdi);
  WINGDIAPI Inteiro WINAPI EndDoc(HDC hdc);
  WINGDIAPI Inteiro WINAPI StartPage(HDC hdc);
  WINGDIAPI Inteiro WINAPI EndPage(HDC hdc);
  WINGDIAPI Inteiro WINAPI AbortDoc(HDC hdc);
  WINGDIAPI Inteiro WINAPI SetAbortProc(HDC hdc,ABORTPROC proc);
  WINGDIAPI WINBOOL WINAPI AbortPath(HDC hdc);
  WINGDIAPI WINBOOL WINAPI ArcTo(HDC hdc,Inteiro left,Inteiro top,Inteiro right,Inteiro bottom,Inteiro xr1,Inteiro yr1,Inteiro xr2,Inteiro yr2);
  WINGDIAPI WINBOOL WINAPI BeginPath(HDC hdc);
  WINGDIAPI WINBOOL WINAPI CloseFigure(HDC hdc);
  WINGDIAPI WINBOOL WINAPI EndPath(HDC hdc);
  WINGDIAPI WINBOOL WINAPI FillPath(HDC hdc);
  WINGDIAPI WINBOOL WINAPI FlattenPath(HDC hdc);
  WINGDIAPI Inteiro WINAPI GetPath(HDC hdc,LPPOINT apt,LPBYTE aj,Inteiro cpt);
  WINGDIAPI HRGN WINAPI PathToRegion(HDC hdc);
  WINGDIAPI WINBOOL WINAPI PolyDraw(HDC hdc,CONST POINT *apt,CONST BYTE *aj,Inteiro cpt);
  WINGDIAPI WINBOOL WINAPI SelectClipPath(HDC hdc,Inteiro mode);
  WINGDIAPI Inteiro WINAPI SetArcDirection(HDC hdc,Inteiro dir);
  WINGDIAPI WINBOOL WINAPI SetMiterLimit(HDC hdc,FLOAT limit,PFLOAT old);
  WINGDIAPI WINBOOL WINAPI StrokeAndFillPath(HDC hdc);
  WINGDIAPI WINBOOL WINAPI StrokePath(HDC hdc);
  WINGDIAPI WINBOOL WINAPI WidenPath(HDC hdc);
  WINGDIAPI HPEN WINAPI ExtCreatePen(DWORD iPenStyle,DWORD cWidth,CONST LOGBRUSH *plbrush,DWORD cStyle,CONST DWORD *pstyle);
  WINGDIAPI WINBOOL WINAPI GetMiterLimit(HDC hdc,PFLOAT plimit);
  WINGDIAPI Inteiro WINAPI GetArcDirection(HDC hdc);
  WINGDIAPI Inteiro WINAPI GetObjectA(HANDLE h,Inteiro c,LPVOID pv);
  WINGDIAPI Inteiro WINAPI GetObjectW(HANDLE h,Inteiro c,LPVOID pv);
  WINGDIAPI WINBOOL WINAPI MoveToEx(HDC hdc,Inteiro x,Inteiro y,LPPOINT lppt);
  WINGDIAPI WINBOOL WINAPI TextOutA(HDC hdc,Inteiro x,Inteiro y,LPCSTR lpString,Inteiro c);
  WINGDIAPI WINBOOL WINAPI TextOutW(HDC hdc,Inteiro x,Inteiro y,LPCWSTR lpString,Inteiro c);
  WINGDIAPI WINBOOL WINAPI ExtTextOutA(HDC hdc,Inteiro x,Inteiro y,UINT options,CONST RECT *lprect,LPCSTR lpString,UINT c,CONST INT *lpDx);
  WINGDIAPI WINBOOL WINAPI ExtTextOutW(HDC hdc,Inteiro x,Inteiro y,UINT options,CONST RECT *lprect,LPCWSTR lpString,UINT c,CONST INT *lpDx);
  WINGDIAPI WINBOOL WINAPI PolyTextOutA(HDC hdc,CONST POLYTEXTA *ppt,Inteiro nstrings);
  WINGDIAPI WINBOOL WINAPI PolyTextOutW(HDC hdc,CONST POLYTEXTW *ppt,Inteiro nstrings);
  WINGDIAPI HRGN WINAPI CreatePolygonRgn(CONST POINT *pptl,Inteiro cPoint,Inteiro iMode);
  WINGDIAPI WINBOOL WINAPI DPtoLP(HDC hdc,LPPOINT lppt,Inteiro c);
  WINGDIAPI WINBOOL WINAPI LPtoDP(HDC hdc,LPPOINT lppt,Inteiro c);
  WINGDIAPI WINBOOL WINAPI Polygon(HDC hdc,CONST POINT *apt,Inteiro cpt);
  WINGDIAPI WINBOOL WINAPI Polyline(HDC hdc,CONST POINT *apt,Inteiro cpt);
  WINGDIAPI WINBOOL WINAPI PolyBezier(HDC hdc,CONST POINT *apt,DWORD cpt);
  WINGDIAPI WINBOOL WINAPI PolyBezierTo(HDC hdc,CONST POINT *apt,DWORD cpt);
  WINGDIAPI WINBOOL WINAPI PolylineTo(HDC hdc,CONST POINT *apt,DWORD cpt);
  WINGDIAPI WINBOOL WINAPI SetViewportExtEx(HDC hdc,Inteiro x,Inteiro y,LPSIZE lpsz);
  WINGDIAPI WINBOOL WINAPI SetViewportOrgEx(HDC hdc,Inteiro x,Inteiro y,LPPOINT lppt);
  WINGDIAPI WINBOOL WINAPI SetWindowExtEx(HDC hdc,Inteiro x,Inteiro y,LPSIZE lpsz);
  WINGDIAPI WINBOOL WINAPI SetWindowOrgEx(HDC hdc,Inteiro x,Inteiro y,LPPOINT lppt);
  WINGDIAPI WINBOOL WINAPI OffsetViewportOrgEx(HDC hdc,Inteiro x,Inteiro y,LPPOINT lppt);
  WINGDIAPI WINBOOL WINAPI OffsetWindowOrgEx(HDC hdc,Inteiro x,Inteiro y,LPPOINT lppt);
  WINGDIAPI WINBOOL WINAPI ScaleViewportExtEx(HDC hdc,Inteiro xn,Inteiro dx,Inteiro yn,Inteiro yd,LPSIZE lpsz);
  WINGDIAPI WINBOOL WINAPI ScaleWindowExtEx(HDC hdc,Inteiro xn,Inteiro xd,Inteiro yn,Inteiro yd,LPSIZE lpsz);
  WINGDIAPI WINBOOL WINAPI SetBitmapDimensionEx(HBITMAP hbm,Inteiro w,Inteiro h,LPSIZE lpsz);
  WINGDIAPI WINBOOL WINAPI SetBrushOrgEx(HDC hdc,Inteiro x,Inteiro y,LPPOINT lppt);
  WINGDIAPI Inteiro WINAPI GetTextFaceA(HDC hdc,Inteiro c,LPSTR lpName);
  WINGDIAPI Inteiro WINAPI GetTextFaceW(HDC hdc,Inteiro c,LPWSTR lpName);

#Defina FONTMAPPER_MAX 10

  Tipo Estrutura tagKERNINGPAIR {
    WORD wFirst;
    WORD wSecond;
    Inteiro iKernAmount;
  } KERNINGPAIR,*LPKERNINGPAIR;

#SeDefinido UNICODE
#Defina GetKerningPairs GetKerningPairsW
#Senão
#Defina GetKerningPairs GetKerningPairsA
#FimSe

  WINGDIAPI DWORD WINAPI GetKerningPairsA(HDC hdc,DWORD nPairs,LPKERNINGPAIR lpKernPair);
  WINGDIAPI DWORD WINAPI GetKerningPairsW(HDC hdc,DWORD nPairs,LPKERNINGPAIR lpKernPair);
  WINGDIAPI WINBOOL WINAPI GetDCOrgEx(HDC hdc,LPPOINT lppt);
  WINGDIAPI WINBOOL WINAPI FixBrushOrgEx(HDC hdc,Inteiro x,Inteiro y,LPPOINT ptl);
  WINGDIAPI WINBOOL WINAPI UnrealizeObject(HGDIOBJ h);
  WINGDIAPI WINBOOL WINAPI GdiFlush();
  WINGDIAPI DWORD WINAPI GdiSetBatchLimit(DWORD dw);
  WINGDIAPI DWORD WINAPI GdiGetBatchLimit();

#Defina ICM_OFF 1
#Defina ICM_ON 2
#Defina ICM_QUERY 3
#Defina ICM_DONE_OUTSIDEDC 4

  Tipo Inteiro (CALLBACK *ICMENUMPROCA)(LPSTR,LPARAM);
  Tipo Inteiro (CALLBACK *ICMENUMPROCW)(LPWSTR,LPARAM);

#SeDefinido UNICODE
#Defina ICMENUMPROC ICMENUMPROCW
#Defina EnumICMProfiles EnumICMProfilesW
#Defina UpdateICMRegKey UpdateICMRegKeyW
#Defina GetLogColorSpace GetLogColorSpaceW
#Defina CreateColorSpace CreateColorSpaceW
#Defina GetICMProfile GetICMProfileW
#Defina SetICMProfile SetICMProfileW
#Senão
#Defina ICMENUMPROC ICMENUMPROCA
#Defina EnumICMProfiles EnumICMProfilesA
#Defina UpdateICMRegKey UpdateICMRegKeyA
#Defina GetLogColorSpace GetLogColorSpaceA
#Defina CreateColorSpace CreateColorSpaceA
#Defina GetICMProfile GetICMProfileA
#Defina SetICMProfile SetICMProfileA
#FimSe

  WINGDIAPI Inteiro WINAPI SetICMMode(HDC hdc,Inteiro mode);
  WINGDIAPI WINBOOL WINAPI CheckColorsInGamut(HDC hdc,LPVOID lpRGBTriple,LPVOID dlpBuffer,DWORD nCount);
  WINGDIAPI HCOLORSPACE WINAPI GetColorSpace(HDC hdc);
  WINGDIAPI WINBOOL WINAPI GetLogColorSpaceA(HCOLORSPACE hColorSpace,LPLOGCOLORSPACEA lpBuffer,DWORD nSize);
  WINGDIAPI WINBOOL WINAPI GetLogColorSpaceW(HCOLORSPACE hColorSpace,LPLOGCOLORSPACEW lpBuffer,DWORD nSize);
  WINGDIAPI HCOLORSPACE WINAPI CreateColorSpaceA(LPLOGCOLORSPACEA lplcs);
  WINGDIAPI HCOLORSPACE WINAPI CreateColorSpaceW(LPLOGCOLORSPACEW lplcs);
  WINGDIAPI HCOLORSPACE WINAPI SetColorSpace(HDC hdc,HCOLORSPACE hcs);
  WINGDIAPI WINBOOL WINAPI DeleteColorSpace(HCOLORSPACE hcs);
  WINGDIAPI WINBOOL WINAPI GetICMProfileA(HDC hdc,LPDWORD pBufSize,LPSTR pszFilename);
  WINGDIAPI WINBOOL WINAPI GetICMProfileW(HDC hdc,LPDWORD pBufSize,LPWSTR pszFilename);
  WINGDIAPI WINBOOL WINAPI SetICMProfileA(HDC hdc,LPSTR lpFileName);
  WINGDIAPI WINBOOL WINAPI SetICMProfileW(HDC hdc,LPWSTR lpFileName);
  WINGDIAPI WINBOOL WINAPI GetDeviceGammaRamp(HDC hdc,LPVOID lpRamp);
  WINGDIAPI WINBOOL WINAPI SetDeviceGammaRamp(HDC hdc,LPVOID lpRamp);
  WINGDIAPI WINBOOL WINAPI ColorMatchToTarget(HDC hdc,HDC hdcTarget,DWORD action);
  WINGDIAPI Inteiro WINAPI EnumICMProfilesA(HDC hdc,ICMENUMPROCA proc,LPARAM param);
  WINGDIAPI Inteiro WINAPI EnumICMProfilesW(HDC hdc,ICMENUMPROCW proc,LPARAM param);
  WINGDIAPI WINBOOL WINAPI UpdateICMRegKeyA(DWORD reserved,LPSTR lpszCMID,LPSTR lpszFileName,UINT command);
  WINGDIAPI WINBOOL WINAPI UpdateICMRegKeyW(DWORD reserved,LPWSTR lpszCMID,LPWSTR lpszFileName,UINT command);
  WINGDIAPI WINBOOL WINAPI ColorCorrectPalette(HDC hdc,HPALETTE hPal,DWORD deFirst,DWORD num);

#SenãoDefinido NOMETAFILE

#Defina ENHMETA_SIGNATURE 0x464D4520
#Defina ENHMETA_STOCK_OBJECT 0x80000000

#Defina EMR_HEADER 1
#Defina EMR_POLYBEZIER 2
#Defina EMR_POLYGON 3
#Defina EMR_POLYLINE 4
#Defina EMR_POLYBEZIERTO 5
#Defina EMR_POLYLINETO 6
#Defina EMR_POLYPOLYLINE 7
#Defina EMR_POLYPOLYGON 8
#Defina EMR_SETWINDOWEXTEX 9
#Defina EMR_SETWINDOWORGEX 10
#Defina EMR_SETVIEWPORTEXTEX 11
#Defina EMR_SETVIEWPORTORGEX 12
#Defina EMR_SETBRUSHORGEX 13
#Defina EMR_EOF 14
#Defina EMR_SETPIXELV 15
#Defina EMR_SETMAPPERFLAGS 16
#Defina EMR_SETMAPMODE 17
#Defina EMR_SETBKMODE 18
#Defina EMR_SETPOLYFILLMODE 19
#Defina EMR_SETROP2 20
#Defina EMR_SETSTRETCHBLTMODE 21
#Defina EMR_SETTEXTALIGN 22
#Defina EMR_SETCOLORADJUSTMENT 23
#Defina EMR_SETTEXTCOLOR 24
#Defina EMR_SETBKCOLOR 25
#Defina EMR_OFFSETCLIPRGN 26
#Defina EMR_MOVETOEX 27
#Defina EMR_SETMETARGN 28
#Defina EMR_EXCLUDECLIPRECT 29
#Defina EMR_INTERSECTCLIPRECT 30
#Defina EMR_SCALEVIEWPORTEXTEX 31
#Defina EMR_SCALEWINDOWEXTEX 32
#Defina EMR_SAVEDC 33
#Defina EMR_RESTOREDC 34
#Defina EMR_SETWORLDTRANSFORM 35
#Defina EMR_MODIFYWORLDTRANSFORM 36
#Defina EMR_SELECTOBJECT 37
#Defina EMR_CREATEPEN 38
#Defina EMR_CREATEBRUSHINDIRECT 39
#Defina EMR_DELETEOBJECT 40
#Defina EMR_ANGLEARC 41
#Defina EMR_ELLIPSE 42
#Defina EMR_RECTANGLE 43
#Defina EMR_ROUNDRECT 44
#Defina EMR_ARC 45
#Defina EMR_CHORD 46
#Defina EMR_PIE 47
#Defina EMR_SELECTPALETTE 48
#Defina EMR_CREATEPALETTE 49
#Defina EMR_SETPALETTEENTRIES 50
#Defina EMR_RESIZEPALETTE 51
#Defina EMR_REALIZEPALETTE 52
#Defina EMR_EXTFLOODFILL 53
#Defina EMR_LINETO 54
#Defina EMR_ARCTO 55
#Defina EMR_POLYDRAW 56
#Defina EMR_SETARCDIRECTION 57
#Defina EMR_SETMITERLIMIT 58
#Defina EMR_BEGINPATH 59
#Defina EMR_ENDPATH 60
#Defina EMR_CLOSEFIGURE 61
#Defina EMR_FILLPATH 62
#Defina EMR_STROKEANDFILLPATH 63
#Defina EMR_STROKEPATH 64
#Defina EMR_FLATTENPATH 65
#Defina EMR_WIDENPATH 66
#Defina EMR_SELECTCLIPPATH 67
#Defina EMR_ABORTPATH 68

#Defina EMR_GDICOMMENT 70
#Defina EMR_FILLRGN 71
#Defina EMR_FRAMERGN 72
#Defina EMR_INVERTRGN 73
#Defina EMR_PAINTRGN 74
#Defina EMR_EXTSELECTCLIPRGN 75
#Defina EMR_BITBLT 76
#Defina EMR_STRETCHBLT 77
#Defina EMR_MASKBLT 78
#Defina EMR_PLGBLT 79
#Defina EMR_SETDIBITSTODEVICE 80
#Defina EMR_STRETCHDIBITS 81
#Defina EMR_EXTCREATEFONTINDIRECTW 82
#Defina EMR_EXTTEXTOUTA 83
#Defina EMR_EXTTEXTOUTW 84
#Defina EMR_POLYBEZIER16 85
#Defina EMR_POLYGON16 86
#Defina EMR_POLYLINE16 87
#Defina EMR_POLYBEZIERTO16 88
#Defina EMR_POLYLINETO16 89
#Defina EMR_POLYPOLYLINE16 90
#Defina EMR_POLYPOLYGON16 91
#Defina EMR_POLYDRAW16 92
#Defina EMR_CREATEMONOBRUSH 93
#Defina EMR_CREATEDIBPATTERNBRUSHPT 94
#Defina EMR_EXTCREATEPEN 95
#Defina EMR_POLYTEXTOUTA 96
#Defina EMR_POLYTEXTOUTW 97

#Defina EMR_SETICMMODE 98
#Defina EMR_CREATECOLORSPACE 99
#Defina EMR_SETCOLORSPACE 100
#Defina EMR_DELETECOLORSPACE 101
#Defina EMR_GLSRECORD 102
#Defina EMR_GLSBOUNDEDRECORD 103
#Defina EMR_PIXELFORMAT 104
#Defina EMR_RESERVED_105 105
#Defina EMR_RESERVED_106 106
#Defina EMR_RESERVED_107 107
#Defina EMR_RESERVED_108 108
#Defina EMR_RESERVED_109 109
#Defina EMR_RESERVED_110 110
#Defina EMR_COLORCORRECTPALETTE 111
#Defina EMR_SETICMPROFILEA 112
#Defina EMR_SETICMPROFILEW 113
#Defina EMR_ALPHABLEND 114
#Defina EMR_SETLAYOUT 115
#Defina EMR_TRANSPARENTBLT 116
#Defina EMR_RESERVED_117 117
#Defina EMR_GRADIENTFILL 118
#Defina EMR_RESERVED_119 119
#Defina EMR_RESERVED_120 120
#Defina EMR_COLORMATCHTOTARGETW 121
#Defina EMR_CREATECOLORSPACEW 122

#Defina EMR_MIN 1

#Defina EMR_MAX 122

  Tipo Estrutura tagEMR {
    DWORD iType;
    DWORD nSize;
  } EMR,*PEMR;

  Tipo Estrutura tagEMRTEXT {
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;
  } EMRTEXT,*PEMRTEXT;

  Tipo Estrutura tagABORTPATH {
    EMR emr;
  } EMRABORTPATH,*PEMRABORTPATH,EMRBEGINPATH,*PEMRBEGINPATH,EMRENDPATH,*PEMRENDPATH,EMRCLOSEFIGURE,*PEMRCLOSEFIGURE,EMRFLATTENPATH,*PEMRFLATTENPATH,EMRWIDENPATH,*PEMRWIDENPATH,EMRSETMETARGN,*PEMRSETMETARGN,EMRSAVEDC,*PEMRSAVEDC,EMRREALIZEPALETTE,*PEMRREALIZEPALETTE;

  Tipo Estrutura tagEMRSELECTCLIPPATH {
    EMR emr;
    DWORD iMode;
  } EMRSELECTCLIPPATH,*PEMRSELECTCLIPPATH,EMRSETBKMODE,*PEMRSETBKMODE,EMRSETMAPMODE,*PEMRSETMAPMODE,EMRSETLAYOUT,*PEMRSETLAYOUT,
    EMRSETPOLYFILLMODE,*PEMRSETPOLYFILLMODE,EMRSETROP2,*PEMRSETROP2,EMRSETSTRETCHBLTMODE,*PEMRSETSTRETCHBLTMODE,EMRSETICMMODE,
    *PEMRSETICMMODE,EMRSETTEXTALIGN,*PEMRSETTEXTALIGN;

  Tipo Estrutura tagEMRSETMITERLIMIT {
    EMR emr;
    FLOAT eMiterLimit;
  } EMRSETMITERLIMIT,*PEMRSETMITERLIMIT;

  Tipo Estrutura tagEMRRESTOREDC {
    EMR emr;
    LONG iRelative;
  } EMRRESTOREDC,*PEMRRESTOREDC;

  Tipo Estrutura tagEMRSETARCDIRECTION {
    EMR emr;
    DWORD iArcDirection;

  } EMRSETARCDIRECTION,*PEMRSETARCDIRECTION;

  Tipo Estrutura tagEMRSETMAPPERFLAGS {
    EMR emr;
    DWORD dwFlags;
  } EMRSETMAPPERFLAGS,*PEMRSETMAPPERFLAGS;

  Tipo Estrutura tagEMRSETTEXTCOLOR {
    EMR emr;
    COLORREF crColor;
  } EMRSETBKCOLOR,*PEMRSETBKCOLOR,EMRSETTEXTCOLOR,*PEMRSETTEXTCOLOR;

  Tipo Estrutura tagEMRSELECTOBJECT {
    EMR emr;
    DWORD ihObject;
  } EMRSELECTOBJECT,*PEMRSELECTOBJECT,EMRDELETEOBJECT,*PEMRDELETEOBJECT;

  Tipo Estrutura tagEMRSELECTPALETTE {
    EMR emr;
    DWORD ihPal;
  } EMRSELECTPALETTE,*PEMRSELECTPALETTE;

  Tipo Estrutura tagEMRRESIZEPALETTE {
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
  } EMRRESIZEPALETTE,*PEMRRESIZEPALETTE;

  Tipo Estrutura tagEMRSETPALETTEENTRIES {
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];
  } EMRSETPALETTEENTRIES,*PEMRSETPALETTEENTRIES;

  Tipo Estrutura tagEMRSETCOLORADJUSTMENT {
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
  } EMRSETCOLORADJUSTMENT,*PEMRSETCOLORADJUSTMENT;

  Tipo Estrutura tagEMRGDICOMMENT {
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
  } EMRGDICOMMENT,*PEMRGDICOMMENT;

  Tipo Estrutura tagEMREOF {
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;
  } EMREOF,*PEMREOF;

  Tipo Estrutura tagEMRLINETO {
    EMR emr;
    POINTL ptl;
  } EMRLINETO,*PEMRLINETO,EMRMOVETOEX,*PEMRMOVETOEX;

  Tipo Estrutura tagEMROFFSETCLIPRGN {
    EMR emr;
    POINTL ptlOffset;
  } EMROFFSETCLIPRGN,*PEMROFFSETCLIPRGN;

  Tipo Estrutura tagEMRFILLPATH {
    EMR emr;
    RECTL rclBounds;
  } EMRFILLPATH,*PEMRFILLPATH,EMRSTROKEANDFILLPATH,*PEMRSTROKEANDFILLPATH,EMRSTROKEPATH,*PEMRSTROKEPATH;

  Tipo Estrutura tagEMREXCLUDECLIPRECT {
    EMR emr;
    RECTL rclClip;
  } EMREXCLUDECLIPRECT,*PEMREXCLUDECLIPRECT,EMRINTERSECTCLIPRECT,*PEMRINTERSECTCLIPRECT;

  Tipo Estrutura tagEMRSETVIEWPORTORGEX {
    EMR emr;
    POINTL ptlOrigin;
  } EMRSETVIEWPORTORGEX,*PEMRSETVIEWPORTORGEX,EMRSETWINDOWORGEX,*PEMRSETWINDOWORGEX,EMRSETBRUSHORGEX,*PEMRSETBRUSHORGEX;

  Tipo Estrutura tagEMRSETVIEWPORTEXTEX {
    EMR emr;
    SIZEL szlExtent;
  } EMRSETVIEWPORTEXTEX,*PEMRSETVIEWPORTEXTEX,EMRSETWINDOWEXTEX,*PEMRSETWINDOWEXTEX;

  Tipo Estrutura tagEMRSCALEVIEWPORTEXTEX {
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
  } EMRSCALEVIEWPORTEXTEX,*PEMRSCALEVIEWPORTEXTEX,EMRSCALEWINDOWEXTEX,*PEMRSCALEWINDOWEXTEX;

  Tipo Estrutura tagEMRSETWORLDTRANSFORM {
    EMR emr;
    XFORM xform;
  } EMRSETWORLDTRANSFORM,*PEMRSETWORLDTRANSFORM;

  Tipo Estrutura tagEMRMODIFYWORLDTRANSFORM {
    EMR emr;
    XFORM xform;
    DWORD iMode;
  } EMRMODIFYWORLDTRANSFORM,*PEMRMODIFYWORLDTRANSFORM;

  Tipo Estrutura tagEMRSETPIXELV {
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
  } EMRSETPIXELV,*PEMRSETPIXELV;

  Tipo Estrutura tagEMREXTFLOODFILL {
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
  } EMREXTFLOODFILL,*PEMREXTFLOODFILL;

  Tipo Estrutura tagEMRELLIPSE {
    EMR emr;
    RECTL rclBox;
  } EMRELLIPSE,*PEMRELLIPSE,EMRRECTANGLE,*PEMRRECTANGLE;

  Tipo Estrutura tagEMRROUNDRECT {
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
  } EMRROUNDRECT,*PEMRROUNDRECT;

  Tipo Estrutura tagEMRARC {
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
  } EMRARC,*PEMRARC,EMRARCTO,*PEMRARCTO,EMRCHORD,*PEMRCHORD,EMRPIE,*PEMRPIE;

  Tipo Estrutura tagEMRANGLEARC {
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
  } EMRANGLEARC,*PEMRANGLEARC;

  Tipo Estrutura tagEMRPOLYLINE {
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
  } EMRPOLYLINE,*PEMRPOLYLINE,EMRPOLYBEZIER,*PEMRPOLYBEZIER,EMRPOLYGON,*PEMRPOLYGON,EMRPOLYBEZIERTO,*PEMRPOLYBEZIERTO,EMRPOLYLINETO,*PEMRPOLYLINETO;

  Tipo Estrutura tagEMRPOLYLINE16 {
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
  } EMRPOLYLINE16,*PEMRPOLYLINE16,EMRPOLYBEZIER16,*PEMRPOLYBEZIER16,EMRPOLYGON16,*PEMRPOLYGON16,EMRPOLYBEZIERTO16,*PEMRPOLYBEZIERTO16,EMRPOLYLINETO16,*PEMRPOLYLINETO16;

  Tipo Estrutura tagEMRPOLYDRAW {
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
    BYTE abTypes[1];
  } EMRPOLYDRAW,*PEMRPOLYDRAW;

  Tipo Estrutura tagEMRPOLYDRAW16 {
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
    BYTE abTypes[1];
  } EMRPOLYDRAW16,*PEMRPOLYDRAW16;

  Tipo Estrutura tagEMRPOLYPOLYLINE {
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD aPolyCounts[1];
    POINTL aptl[1];
  } EMRPOLYPOLYLINE,*PEMRPOLYPOLYLINE,EMRPOLYPOLYGON,*PEMRPOLYPOLYGON;

  Tipo Estrutura tagEMRPOLYPOLYLINE16 {
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD aPolyCounts[1];
    POINTS apts[1];
  } EMRPOLYPOLYLINE16,*PEMRPOLYPOLYLINE16,EMRPOLYPOLYGON16,*PEMRPOLYPOLYGON16;

  Tipo Estrutura tagEMRINVERTRGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE RgnData[1];
  } EMRINVERTRGN,*PEMRINVERTRGN,EMRPAINTRGN,*PEMRPAINTRGN;

  Tipo Estrutura tagEMRFILLRGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE RgnData[1];
  } EMRFILLRGN,*PEMRFILLRGN;

  Tipo Estrutura tagEMRFRAMERGN {
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE RgnData[1];
  } EMRFRAMERGN,*PEMRFRAMERGN;

  Tipo Estrutura tagEMREXTSELECTCLIPRGN {
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE RgnData[1];
  } EMREXTSELECTCLIPRGN,*PEMREXTSELECTCLIPRGN;

  Tipo Estrutura tagEMREXTTEXTOUTA {
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;
  } EMREXTTEXTOUTA,*PEMREXTTEXTOUTA,EMREXTTEXTOUTW,*PEMREXTTEXTOUTW;

  Tipo Estrutura tagEMRPOLYTEXTOUTA {
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT aemrtext[1];
  } EMRPOLYTEXTOUTA,*PEMRPOLYTEXTOUTA,EMRPOLYTEXTOUTW,*PEMRPOLYTEXTOUTW;

  Tipo Estrutura tagEMRBITBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
  } EMRBITBLT,*PEMRBITBLT;

  Tipo Estrutura tagEMRSTRETCHBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
  } EMRSTRETCHBLT,*PEMRSTRETCHBLT;

  Tipo Estrutura tagEMRMASKBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
  } EMRMASKBLT,*PEMRMASKBLT;

  Tipo Estrutura tagEMRPLGBLT {
    EMR emr;
    RECTL rclBounds;
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
  } EMRPLGBLT,*PEMRPLGBLT;

  Tipo Estrutura tagEMRSETDIBITSTODEVICE {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
  } EMRSETDIBITSTODEVICE,*PEMRSETDIBITSTODEVICE;

  Tipo Estrutura tagEMRSTRETCHDIBITS {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
  } EMRSTRETCHDIBITS,*PEMRSTRETCHDIBITS;

  Tipo Estrutura tagEMREXTCREATEFONTINDIRECTW {
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
  } EMREXTCREATEFONTINDIRECTW,*PEMREXTCREATEFONTINDIRECTW;

  Tipo Estrutura tagEMRCREATEPALETTE {
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;
  } EMRCREATEPALETTE,*PEMRCREATEPALETTE;

  Tipo Estrutura tagEMRCREATEPEN {
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
  } EMRCREATEPEN,*PEMRCREATEPEN;

  Tipo Estrutura tagEMREXTCREATEPEN {
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN elp;
  } EMREXTCREATEPEN,*PEMREXTCREATEPEN;

  Tipo Estrutura tagEMRCREATEBRUSHINDIRECT {
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;
  } EMRCREATEBRUSHINDIRECT,*PEMRCREATEBRUSHINDIRECT;

  Tipo Estrutura tagEMRCREATEMONOBRUSH {
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
  } EMRCREATEMONOBRUSH,*PEMRCREATEMONOBRUSH;

  Tipo Estrutura tagEMRCREATEDIBPATTERNBRUSHPT {
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
  } EMRCREATEDIBPATTERNBRUSHPT,*PEMRCREATEDIBPATTERNBRUSHPT;

  Tipo Estrutura tagEMRFORMAT {
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;
  } EMRFORMAT,*PEMRFORMAT;

  Tipo Estrutura tagEMRGLSRECORD {
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
  } EMRGLSRECORD,*PEMRGLSRECORD;

  Tipo Estrutura tagEMRGLSBOUNDEDRECORD {
    EMR emr;
    RECTL rclBounds;
    DWORD cbData;
    BYTE Data[1];
  } EMRGLSBOUNDEDRECORD,*PEMRGLSBOUNDEDRECORD;

  Tipo Estrutura tagEMRPIXELFORMAT {
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
  } EMRPIXELFORMAT,*PEMRPIXELFORMAT;

  Tipo Estrutura tagEMRCREATECOLORSPACE {
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
  } EMRCREATECOLORSPACE,*PEMRCREATECOLORSPACE;

  Tipo Estrutura tagEMRSETCOLORSPACE {
    EMR emr;
    DWORD ihCS;
  } EMRSETCOLORSPACE,*PEMRSETCOLORSPACE,EMRSELECTCOLORSPACE,*PEMRSELECTCOLORSPACE,EMRDELETECOLORSPACE,*PEMRDELETECOLORSPACE;

  Tipo Estrutura tagEMREXTESCAPE {
    EMR emr;
    INT iEscape;
    INT cbEscData;
    BYTE EscData[1];
  } EMREXTESCAPE,*PEMREXTESCAPE,EMRDRAWESCAPE,*PEMRDRAWESCAPE;

  Tipo Estrutura tagEMRNAMEDESCAPE {
    EMR emr;
    INT iEscape;
    INT cbDriver;
    INT cbEscData;
    BYTE EscData[1];
  } EMRNAMEDESCAPE,*PEMRNAMEDESCAPE;

#Defina SETICMPROFILE_EMBEDED 0x00000001

  Tipo Estrutura tagEMRSETICMPROFILE {
    EMR emr;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
  } EMRSETICMPROFILE,*PEMRSETICMPROFILE,EMRSETICMPROFILEA,*PEMRSETICMPROFILEA,EMRSETICMPROFILEW,*PEMRSETICMPROFILEW;

#Defina CREATECOLORSPACE_EMBEDED 0x00000001

  Tipo Estrutura tagEMRCREATECOLORSPACEW {
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
    DWORD dwFlags;
    DWORD cbData;
    BYTE Data[1];
  } EMRCREATECOLORSPACEW,*PEMRCREATECOLORSPACEW;

#Defina COLORMATCHTOTARGET_EMBEDED 0x00000001

  Tipo Estrutura tagCOLORMATCHTOTARGET {
    EMR emr;
    DWORD dwAction;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
  } EMRCOLORMATCHTOTARGET,*PEMRCOLORMATCHTOTARGET;

  Tipo Estrutura tagCOLORCORRECTPALETTE {
    EMR emr;
    DWORD ihPalette;
    DWORD nFirstEntry;
    DWORD nPalEntries;
    DWORD nReserved;
  } EMRCOLORCORRECTPALETTE,*PEMRCOLORCORRECTPALETTE;

  Tipo Estrutura tagEMRALPHABLEND {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
  } EMRALPHABLEND,*PEMRALPHABLEND;

  Tipo Estrutura tagEMRGRADIENTFILL {
    EMR emr;
    RECTL rclBounds;
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX Ver[1];
  } EMRGRADIENTFILL,*PEMRGRADIENTFILL;

  Tipo Estrutura tagEMRTRANSPARENTBLT {
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
  } EMRTRANSPARENTBLT,*PEMRTRANSPARENTBLT;

#Defina GDICOMMENT_IDENTIFIER 0x43494447
#Defina GDICOMMENT_WINDOWS_METAFILE 0x80000001
#Defina GDICOMMENT_BEGINGROUP 0x00000002
#Defina GDICOMMENT_ENDGROUP 0x00000003
#Defina GDICOMMENT_MULTIFORMATS 0x40000004
#Defina EPS_SIGNATURE 0x46535045
#Defina GDICOMMENT_UNICODE_STRING 0x00000040
#Defina GDICOMMENT_UNICODE_END 0x00000080
#FimSe

#SeDefinido UNICODE
#Defina wglUseFontBitmaps wglUseFontBitmapsW
#Senão
#Defina wglUseFontBitmaps wglUseFontBitmapsA
#FimSe

  WINGDIAPI WINBOOL WINAPI wglCopyContext(HGLRC,HGLRC,UINT);
  WINGDIAPI HGLRC WINAPI wglCreateContext(HDC);
  WINGDIAPI HGLRC WINAPI wglCreateLayerContext(HDC,Inteiro);
  WINGDIAPI WINBOOL WINAPI wglDeleteContext(HGLRC);
  WINGDIAPI HGLRC WINAPI wglGetCurrentContext(VOID);
  WINGDIAPI HDC WINAPI wglGetCurrentDC(VOID);
  WINGDIAPI PROC WINAPI wglGetProcAddress(LPCSTR);
  WINGDIAPI WINBOOL WINAPI wglMakeCurrent(HDC,HGLRC);
  WINGDIAPI WINBOOL WINAPI wglShareLists(HGLRC,HGLRC);
  WINGDIAPI WINBOOL WINAPI wglUseFontBitmapsA(HDC,DWORD,DWORD,DWORD);
  WINGDIAPI WINBOOL WINAPI wglUseFontBitmapsW(HDC,DWORD,DWORD,DWORD);
  WINGDIAPI WINBOOL WINAPI SwapBuffers(HDC);

  Tipo Estrutura _POINTFLOAT {
    FLOAT x;
    FLOAT y;
  } POINTFLOAT,*PPOINTFLOAT;

  Tipo Estrutura _GLYPHMETRICSFLOAT {
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
  } GLYPHMETRICSFLOAT,*PGLYPHMETRICSFLOAT,*LPGLYPHMETRICSFLOAT;

#Defina WGL_FONT_LINES 0
#Defina WGL_FONT_POLYGONS 1

#SeDefinido UNICODE
#Defina wglUseFontOutlines wglUseFontOutlinesW
#Senão
#Defina wglUseFontOutlines wglUseFontOutlinesA
#FimSe

  WINGDIAPI WINBOOL WINAPI wglUseFontOutlinesA(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,Inteiro,LPGLYPHMETRICSFLOAT);
  WINGDIAPI WINBOOL WINAPI wglUseFontOutlinesW(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,Inteiro,LPGLYPHMETRICSFLOAT);

  Tipo Estrutura tagLAYERPLANEDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
  } LAYERPLANEDESCRIPTOR,*PLAYERPLANEDESCRIPTOR,*LPLAYERPLANEDESCRIPTOR;

#Defina LPD_DOUBLEBUFFER 0x00000001
#Defina LPD_STEREO 0x00000002
#Defina LPD_SUPPORT_GDI 0x00000010
#Defina LPD_SUPPORT_OPENGL 0x00000020
#Defina LPD_SHARE_DEPTH 0x00000040
#Defina LPD_SHARE_STENCIL 0x00000080
#Defina LPD_SHARE_ACCUM 0x00000100
#Defina LPD_SWAP_EXCHANGE 0x00000200
#Defina LPD_SWAP_COPY 0x00000400
#Defina LPD_TRANSPARENT 0x00001000

#Defina LPD_TYPE_RGBA 0
#Defina LPD_TYPE_COLORINDEX 1

#Defina WGL_SWAP_MAIN_PLANE 0x00000001
#Defina WGL_SWAP_OVERLAY1 0x00000002
#Defina WGL_SWAP_OVERLAY2 0x00000004
#Defina WGL_SWAP_OVERLAY3 0x00000008
#Defina WGL_SWAP_OVERLAY4 0x00000010
#Defina WGL_SWAP_OVERLAY5 0x00000020
#Defina WGL_SWAP_OVERLAY6 0x00000040
#Defina WGL_SWAP_OVERLAY7 0x00000080
#Defina WGL_SWAP_OVERLAY8 0x00000100
#Defina WGL_SWAP_OVERLAY9 0x00000200
#Defina WGL_SWAP_OVERLAY10 0x00000400
#Defina WGL_SWAP_OVERLAY11 0x00000800
#Defina WGL_SWAP_OVERLAY12 0x00001000
#Defina WGL_SWAP_OVERLAY13 0x00002000
#Defina WGL_SWAP_OVERLAY14 0x00004000
#Defina WGL_SWAP_OVERLAY15 0x00008000
#Defina WGL_SWAP_UNDERLAY1 0x00010000
#Defina WGL_SWAP_UNDERLAY2 0x00020000
#Defina WGL_SWAP_UNDERLAY3 0x00040000
#Defina WGL_SWAP_UNDERLAY4 0x00080000
#Defina WGL_SWAP_UNDERLAY5 0x00100000
#Defina WGL_SWAP_UNDERLAY6 0x00200000
#Defina WGL_SWAP_UNDERLAY7 0x00400000
#Defina WGL_SWAP_UNDERLAY8 0x00800000
#Defina WGL_SWAP_UNDERLAY9 0x01000000
#Defina WGL_SWAP_UNDERLAY10 0x02000000
#Defina WGL_SWAP_UNDERLAY11 0x04000000
#Defina WGL_SWAP_UNDERLAY12 0x08000000
#Defina WGL_SWAP_UNDERLAY13 0x10000000
#Defina WGL_SWAP_UNDERLAY14 0x20000000
#Defina WGL_SWAP_UNDERLAY15 0x40000000

  WINGDIAPI WINBOOL WINAPI wglDescribeLayerPlane(HDC,Inteiro,Inteiro,UINT,LPLAYERPLANEDESCRIPTOR);
  WINGDIAPI Inteiro WINAPI wglSetLayerPaletteEntries(HDC,Inteiro,Inteiro,Inteiro,CONST COLORREF *);
  WINGDIAPI Inteiro WINAPI wglGetLayerPaletteEntries(HDC,Inteiro,Inteiro,Inteiro,COLORREF *);
  WINGDIAPI WINBOOL WINAPI wglRealizeLayerPalette(HDC,Inteiro,WINBOOL);
  WINGDIAPI WINBOOL WINAPI wglSwapLayerBuffers(HDC,UINT);

  Tipo Estrutura _WGLSWAP {
    HDC hdc;
    UINT uiFlags;
  } WGLSWAP,*PWGLSWAP,*LPWGLSWAP;

#Defina WGL_SWAPMULTIPLE_MAX 16

  WINGDIAPI DWORD WINAPI wglSwapMultipleBuffers(UINT,CONST WGLSWAP *);
#FimSe

#SeDefinido __cplusplus
}
#FimSe
#FimSe
